
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: Root 
[PlexilExec:step][1:0:0] Transitioning node Root from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: Root 
[PlexilExec:step][1:1:0] Transitioning node Root from WAITING to EXECUTING
[PlexilExec:step][1:2] State change queue: Inc 
[PlexilExec:step][1:2:0] Transitioning node Inc from INACTIVE to WAITING
[PlexilExec:step][1:3] State change queue: Inc 
[PlexilExec:step][1:3:0] Transitioning node Inc from WAITING to EXECUTING
[Test:testOutput]Assigning 'count' (count (id_38[au](0): int)) to 1
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
Root{
 State: Root (id_28[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
 SkipCondition: Boolean constant false (id_34[au](0): boolean)
 StartCondition: BooleanValue (id_115[iu](1): boolean)
 EndCondition: (id_109[au](0): (id_113[au](0): (Inc (id_41[au](EXECUTING): state) == NodeStateValue (id_111[au](FINISHED): state))))
 ExitCondition: Boolean constant false (id_34[au](0): boolean)
 InvariantCondition: Boolean constant true (id_36[au](1): boolean)
 PreCondition: Boolean constant true (id_36[au](1): boolean)
 PostCondition: Boolean constant true (id_36[au](1): boolean)
 RepeatCondition: Boolean constant false (id_34[au](0): boolean)
 ActionCompleteCondition: (id_99[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 count: count (id_38[au](1): int)
  Inc{
   State: Inc (id_41[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_109[au](0): (id_113[au](0): (Inc (id_41[au](EXECUTING): state) == NodeStateValue (id_111[au](FINISHED): state))))
   AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
   SkipCondition: Boolean constant false (id_34[au](0): boolean)
   StartCondition: Boolean constant true (id_36[au](1): boolean)
   EndCondition: Boolean constant true (id_36[au](1): boolean)
   ExitCondition: Boolean constant false (id_34[au](0): boolean)
   InvariantCondition: Boolean constant true (id_36[au](1): boolean)
   PreCondition: Boolean constant true (id_36[au](1): boolean)
   PostCondition: Boolean constant true (id_36[au](1): boolean)
   RepeatCondition: (id_131[iu](UNKNOWN): (count (id_38[au](1): int) < IntegerValue (id_133[au](4): int)))
   ActionCompleteCondition: Inc ack (id_123[au](1): boolean)
   AbortCompleteCondition: Inc abortComplete (id_125[iu](UNKNOWN): boolean)
   count: count (id_38[au](1): int)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: Inc 
[PlexilExec:step][2:0:0] Transitioning node Inc from EXECUTING to ITERATION_ENDED
[PlexilExec:step][2:1] State change queue: Inc 
[PlexilExec:step][2:1:0] Transitioning node Inc from ITERATION_ENDED to WAITING
[PlexilExec:step][2:2] State change queue: Inc 
[PlexilExec:step][2:2:0] Transitioning node Inc from WAITING to EXECUTING
[Test:testOutput]Assigning 'count' (count (id_38[au](1): int)) to 2
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
Root{
 State: Root (id_28[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
 SkipCondition: Boolean constant false (id_34[au](0): boolean)
 StartCondition: BooleanValue (id_115[iu](1): boolean)
 EndCondition: (id_109[au](0): (id_113[au](0): (Inc (id_41[au](EXECUTING): state) == NodeStateValue (id_111[au](FINISHED): state))))
 ExitCondition: Boolean constant false (id_34[au](0): boolean)
 InvariantCondition: Boolean constant true (id_36[au](1): boolean)
 PreCondition: Boolean constant true (id_36[au](1): boolean)
 PostCondition: Boolean constant true (id_36[au](1): boolean)
 RepeatCondition: Boolean constant false (id_34[au](0): boolean)
 ActionCompleteCondition: (id_99[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 count: count (id_38[au](2): int)
  Inc{
   State: Inc (id_41[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_109[au](0): (id_113[au](0): (Inc (id_41[au](EXECUTING): state) == NodeStateValue (id_111[au](FINISHED): state))))
   AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
   SkipCondition: Boolean constant false (id_34[au](0): boolean)
   StartCondition: Boolean constant true (id_36[au](1): boolean)
   EndCondition: Boolean constant true (id_36[au](1): boolean)
   ExitCondition: Boolean constant false (id_34[au](0): boolean)
   InvariantCondition: Boolean constant true (id_36[au](1): boolean)
   PreCondition: Boolean constant true (id_36[au](1): boolean)
   PostCondition: Boolean constant true (id_36[au](1): boolean)
   RepeatCondition: (id_131[iu](UNKNOWN): (count (id_38[au](2): int) < IntegerValue (id_133[au](4): int)))
   ActionCompleteCondition: Inc ack (id_123[au](1): boolean)
   AbortCompleteCondition: Inc abortComplete (id_125[iu](UNKNOWN): boolean)
   count: count (id_38[au](2): int)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:step][3:0] State change queue: Inc 
[PlexilExec:step][3:0:0] Transitioning node Inc from EXECUTING to ITERATION_ENDED
[PlexilExec:step][3:1] State change queue: Inc 
[PlexilExec:step][3:1:0] Transitioning node Inc from ITERATION_ENDED to WAITING
[PlexilExec:step][3:2] State change queue: Inc 
[PlexilExec:step][3:2:0] Transitioning node Inc from WAITING to EXECUTING
[Test:testOutput]Assigning 'count' (count (id_38[au](2): int)) to 3
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
Root{
 State: Root (id_28[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
 SkipCondition: Boolean constant false (id_34[au](0): boolean)
 StartCondition: BooleanValue (id_115[iu](1): boolean)
 EndCondition: (id_109[au](0): (id_113[au](0): (Inc (id_41[au](EXECUTING): state) == NodeStateValue (id_111[au](FINISHED): state))))
 ExitCondition: Boolean constant false (id_34[au](0): boolean)
 InvariantCondition: Boolean constant true (id_36[au](1): boolean)
 PreCondition: Boolean constant true (id_36[au](1): boolean)
 PostCondition: Boolean constant true (id_36[au](1): boolean)
 RepeatCondition: Boolean constant false (id_34[au](0): boolean)
 ActionCompleteCondition: (id_99[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 count: count (id_38[au](3): int)
  Inc{
   State: Inc (id_41[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_109[au](0): (id_113[au](0): (Inc (id_41[au](EXECUTING): state) == NodeStateValue (id_111[au](FINISHED): state))))
   AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
   SkipCondition: Boolean constant false (id_34[au](0): boolean)
   StartCondition: Boolean constant true (id_36[au](1): boolean)
   EndCondition: Boolean constant true (id_36[au](1): boolean)
   ExitCondition: Boolean constant false (id_34[au](0): boolean)
   InvariantCondition: Boolean constant true (id_36[au](1): boolean)
   PreCondition: Boolean constant true (id_36[au](1): boolean)
   PostCondition: Boolean constant true (id_36[au](1): boolean)
   RepeatCondition: (id_131[iu](UNKNOWN): (count (id_38[au](3): int) < IntegerValue (id_133[au](4): int)))
   ActionCompleteCondition: Inc ack (id_123[au](1): boolean)
   AbortCompleteCondition: Inc abortComplete (id_125[iu](UNKNOWN): boolean)
   count: count (id_38[au](3): int)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:step][4:0] State change queue: Inc 
[PlexilExec:step][4:0:0] Transitioning node Inc from EXECUTING to ITERATION_ENDED
[PlexilExec:step][4:1] State change queue: Inc 
[PlexilExec:step][4:1:0] Transitioning node Inc from ITERATION_ENDED to WAITING
[PlexilExec:step][4:2] State change queue: Inc 
[PlexilExec:step][4:2:0] Transitioning node Inc from WAITING to EXECUTING
[Test:testOutput]Assigning 'count' (count (id_38[au](3): int)) to 4
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
Root{
 State: Root (id_28[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
 SkipCondition: Boolean constant false (id_34[au](0): boolean)
 StartCondition: BooleanValue (id_115[iu](1): boolean)
 EndCondition: (id_109[au](0): (id_113[au](0): (Inc (id_41[au](EXECUTING): state) == NodeStateValue (id_111[au](FINISHED): state))))
 ExitCondition: Boolean constant false (id_34[au](0): boolean)
 InvariantCondition: Boolean constant true (id_36[au](1): boolean)
 PreCondition: Boolean constant true (id_36[au](1): boolean)
 PostCondition: Boolean constant true (id_36[au](1): boolean)
 RepeatCondition: Boolean constant false (id_34[au](0): boolean)
 ActionCompleteCondition: (id_99[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 count: count (id_38[au](4): int)
  Inc{
   State: Inc (id_41[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_109[au](0): (id_113[au](0): (Inc (id_41[au](EXECUTING): state) == NodeStateValue (id_111[au](FINISHED): state))))
   AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
   SkipCondition: Boolean constant false (id_34[au](0): boolean)
   StartCondition: Boolean constant true (id_36[au](1): boolean)
   EndCondition: Boolean constant true (id_36[au](1): boolean)
   ExitCondition: Boolean constant false (id_34[au](0): boolean)
   InvariantCondition: Boolean constant true (id_36[au](1): boolean)
   PreCondition: Boolean constant true (id_36[au](1): boolean)
   PostCondition: Boolean constant true (id_36[au](1): boolean)
   RepeatCondition: (id_131[iu](UNKNOWN): (count (id_38[au](4): int) < IntegerValue (id_133[au](4): int)))
   ActionCompleteCondition: Inc ack (id_123[au](1): boolean)
   AbortCompleteCondition: Inc abortComplete (id_125[iu](UNKNOWN): boolean)
   count: count (id_38[au](4): int)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:step][5:0] State change queue: Inc 
[PlexilExec:step][5:0:0] Transitioning node Inc from EXECUTING to ITERATION_ENDED
[PlexilExec:step][5:1] State change queue: Inc 
[PlexilExec:step][5:1:0] Transitioning node Inc from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'Inc' is SUCCESS
[PlexilExec:step][5:2] State change queue: Root 
[PlexilExec:step][5:2:0] Transitioning node Root from EXECUTING to FINISHING
[PlexilExec:step][5:3] State change queue: Root 
[PlexilExec:step][5:3:0] Transitioning node Root from FINISHING to ITERATION_ENDED
[PlexilExec:step][5:4] State change queue: Root 
[PlexilExec:step][5:4:0] Transitioning node Root from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'Root' is SUCCESS
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
Root{
 State: Root (id_28[au](FINISHED): state) (0)
 Outcome: Root (id_30[au](SUCCESS): outcome)
 count: count (id_38[iu](4): int)
  Inc{
   State: Inc (id_41[au](FINISHED): state) (0)
   Outcome: Inc (id_43[au](SUCCESS): outcome)
   count: count (id_38[iu](4): int)
  }
}

