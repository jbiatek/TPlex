
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: Root 
[PlexilExec:step][1:0:0] Transitioning node Root from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: Root 
[PlexilExec:step][1:1:0] Transitioning node Root from WAITING to EXECUTING
[PlexilExec:step][1:2] State change queue: xy yx check 
[PlexilExec:step][1:2:0] Transitioning node xy from INACTIVE to WAITING
[PlexilExec:step][1:2:1] Transitioning node yx from INACTIVE to WAITING
[PlexilExec:step][1:2:2] Transitioning node check from INACTIVE to WAITING
[PlexilExec:step][1:3] State change queue: xy yx 
[PlexilExec:step][1:3:0] Transitioning node xy from WAITING to EXECUTING
[PlexilExec:step][1:3:1] Transitioning node yx from WAITING to EXECUTING
[Test:testOutput]Assigning 'x' (x (id_49[au](0): int)) to 1
[Test:testOutput]Assigning 'y' (y (id_51[au](1): int)) to 0
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
Root{
 State: Root (id_39[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_45[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_45[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_47[au](1): boolean)
 SkipCondition: Boolean constant false (id_45[au](0): boolean)
 StartCondition: Boolean constant true (id_47[au](1): boolean)
 EndCondition: (id_185[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_45[au](0): boolean)
 InvariantCondition: Boolean constant true (id_47[au](1): boolean)
 PreCondition: Boolean constant true (id_47[au](1): boolean)
 PostCondition: Boolean constant true (id_47[au](1): boolean)
 RepeatCondition: Boolean constant false (id_45[au](0): boolean)
 ActionCompleteCondition: (id_178[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 x: x (id_49[au](1): int)
 y: y (id_51[au](0): int)
  xy{
   State: xy (id_54[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_185[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_45[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_47[au](1): boolean)
   SkipCondition: Boolean constant false (id_45[au](0): boolean)
   StartCondition: Boolean constant true (id_47[au](1): boolean)
   EndCondition: Boolean constant true (id_47[au](1): boolean)
   ExitCondition: Boolean constant false (id_45[au](0): boolean)
   InvariantCondition: Boolean constant true (id_47[au](1): boolean)
   PreCondition: Boolean constant true (id_47[au](1): boolean)
   PostCondition: Boolean constant true (id_47[au](1): boolean)
   RepeatCondition: Boolean constant false (id_45[au](0): boolean)
   ActionCompleteCondition: xy ack (id_193[au](1): boolean)
   AbortCompleteCondition: xy abortComplete (id_195[iu](UNKNOWN): boolean)
   x: x (id_49[au](1): int)
   y: y (id_51[au](0): int)
  }
  yx{
   State: yx (id_85[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_185[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_45[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_47[au](1): boolean)
   SkipCondition: Boolean constant false (id_45[au](0): boolean)
   StartCondition: Boolean constant true (id_47[au](1): boolean)
   EndCondition: Boolean constant true (id_47[au](1): boolean)
   ExitCondition: Boolean constant false (id_45[au](0): boolean)
   InvariantCondition: Boolean constant true (id_47[au](1): boolean)
   PreCondition: Boolean constant true (id_47[au](1): boolean)
   PostCondition: Boolean constant true (id_47[au](1): boolean)
   RepeatCondition: Boolean constant false (id_45[au](0): boolean)
   ActionCompleteCondition: yx ack (id_202[au](1): boolean)
   AbortCompleteCondition: yx abortComplete (id_204[iu](UNKNOWN): boolean)
   x: x (id_49[au](1): int)
   y: y (id_51[au](0): int)
  }
  check{
   State: check (id_116[au](WAITING): state) (0)
   AncestorEndCondition: (id_185[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_45[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_47[au](1): boolean)
   SkipCondition: Boolean constant false (id_45[au](0): boolean)
   StartCondition: (id_223[au](0): ((id_225[au](0): (id_229[au](0): (xy (id_54[au](EXECUTING): state) == NodeStateValue (id_227[au](FINISHED): state)))) && (id_231[au](0): (id_235[au](0): (yx (id_85[au](EXECUTING): state) == NodeStateValue (id_233[au](FINISHED): state))))))
   EndCondition: Boolean constant true (id_47[au](1): boolean)
   ExitCondition: Boolean constant false (id_45[au](0): boolean)
   InvariantCondition: Boolean constant true (id_47[au](1): boolean)
   PreCondition: Boolean constant true (id_47[au](1): boolean)
   PostCondition: Boolean constant true (id_47[au](1): boolean)
   RepeatCondition: Boolean constant false (id_45[au](0): boolean)
   ActionCompleteCondition: (id_217[iu](UNKNOWN): isknown(check command_handle (id_213[iu](UNKNOWN): command_handle)))
   AbortCompleteCondition: check abortComplete (id_215[iu](UNKNOWN): boolean)
   Command handle: check command_handle (id_213[iu](UNKNOWN): command_handle)
   x: x (id_49[au](1): int)
   y: y (id_51[au](0): int)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: xy yx 
[PlexilExec:step][2:0:0] Transitioning node xy from EXECUTING to ITERATION_ENDED
[PlexilExec:step][2:0:1] Transitioning node yx from EXECUTING to ITERATION_ENDED
[PlexilExec:step][2:1] State change queue: xy yx 
[PlexilExec:step][2:1:0] Transitioning node xy from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'xy' is SUCCESS
[PlexilExec:step][2:1:1] Transitioning node yx from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'yx' is SUCCESS
[PlexilExec:step][2:2] State change queue: check 
[PlexilExec:step][2:2:0] Transitioning node check from WAITING to EXECUTING
[Test:testOutput]Executing check(1, 0) into noId with ack check command_handle (id_213[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
Root{
 State: Root (id_39[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_45[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_45[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_47[au](1): boolean)
 SkipCondition: Boolean constant false (id_45[au](0): boolean)
 StartCondition: Boolean constant true (id_47[au](1): boolean)
 EndCondition: (id_185[au](0): childrenFinished(2:3))
 ExitCondition: Boolean constant false (id_45[au](0): boolean)
 InvariantCondition: Boolean constant true (id_47[au](1): boolean)
 PreCondition: Boolean constant true (id_47[au](1): boolean)
 PostCondition: Boolean constant true (id_47[au](1): boolean)
 RepeatCondition: Boolean constant false (id_45[au](0): boolean)
 ActionCompleteCondition: (id_178[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 x: x (id_49[au](1): int)
 y: y (id_51[au](0): int)
  xy{
   State: xy (id_54[au](FINISHED): state) (0)
   Outcome: xy (id_56[au](SUCCESS): outcome)
   x: x (id_49[au](1): int)
   y: y (id_51[au](0): int)
  }
  yx{
   State: yx (id_85[au](FINISHED): state) (0)
   Outcome: yx (id_87[au](SUCCESS): outcome)
   x: x (id_49[au](1): int)
   y: y (id_51[au](0): int)
  }
  check{
   State: check (id_116[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_185[au](0): childrenFinished(2:3))
   AncestorExitCondition: Boolean constant false (id_45[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_47[au](1): boolean)
   SkipCondition: Boolean constant false (id_45[au](0): boolean)
   StartCondition: (id_223[iu](UNKNOWN): ((id_225[iu](UNKNOWN): (id_229[iu](UNKNOWN): (xy (id_54[au](FINISHED): state) == NodeStateValue (id_227[au](FINISHED): state)))) && (id_231[iu](UNKNOWN): (id_235[iu](UNKNOWN): (yx (id_85[au](FINISHED): state) == NodeStateValue (id_233[au](FINISHED): state))))))
   EndCondition: Boolean constant true (id_47[au](1): boolean)
   ExitCondition: Boolean constant false (id_45[au](0): boolean)
   InvariantCondition: Boolean constant true (id_47[au](1): boolean)
   PreCondition: Boolean constant true (id_47[au](1): boolean)
   PostCondition: Boolean constant true (id_47[au](1): boolean)
   RepeatCondition: Boolean constant false (id_45[au](0): boolean)
   ActionCompleteCondition: (id_217[iu](UNKNOWN): isknown(check command_handle (id_213[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: check abortComplete (id_215[au](UNKNOWN): boolean)
   Command handle: check command_handle (id_213[au](UNKNOWN): command_handle)
   x: x (id_49[au](1): int)
   y: y (id_51[au](0): int)
  }
}

[Test:testOutput]Sending command ACK check(1, 0) = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:step][3:0] State change queue: check 
[PlexilExec:step][3:0:0] Transitioning node check from EXECUTING to FINISHING
[PlexilExec:step][3:1] State change queue: check 
[PlexilExec:step][3:1:0] Transitioning node check from FINISHING to ITERATION_ENDED
[PlexilExec:step][3:2] State change queue: check 
[PlexilExec:step][3:2:0] Transitioning node check from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'check' is SUCCESS
[PlexilExec:step][3:3] State change queue: Root 
[PlexilExec:step][3:3:0] Transitioning node Root from EXECUTING to FINISHING
[PlexilExec:step][3:4] State change queue: Root 
[PlexilExec:step][3:4:0] Transitioning node Root from FINISHING to ITERATION_ENDED
[PlexilExec:step][3:5] State change queue: Root 
[PlexilExec:step][3:5:0] Transitioning node Root from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'Root' is SUCCESS
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
Root{
 State: Root (id_39[au](FINISHED): state) (0)
 Outcome: Root (id_41[au](SUCCESS): outcome)
 x: x (id_49[iu](1): int)
 y: y (id_51[iu](0): int)
  xy{
   State: xy (id_54[au](FINISHED): state) (0)
   Outcome: xy (id_56[au](SUCCESS): outcome)
   x: x (id_49[iu](1): int)
   y: y (id_51[iu](0): int)
  }
  yx{
   State: yx (id_85[au](FINISHED): state) (0)
   Outcome: yx (id_87[au](SUCCESS): outcome)
   x: x (id_49[iu](1): int)
   y: y (id_51[iu](0): int)
  }
  check{
   State: check (id_116[au](FINISHED): state) (0)
   Outcome: check (id_118[au](SUCCESS): outcome)
   Command handle: check command_handle (id_213[iu](COMMAND_SUCCESS): command_handle)
   x: x (id_49[iu](1): int)
   y: y (id_51[iu](0): int)
  }
}

