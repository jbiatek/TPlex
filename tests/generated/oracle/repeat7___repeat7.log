
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Creating initial state time() = 0
[Test:testOutput]Creating initial state continue() = 1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: repeat7 
[PlexilExec:step][1:0:0] Transitioning node repeat7 from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: repeat7 
[PlexilExec:step][1:1:0] Transitioning node repeat7 from WAITING to EXECUTING
[Test:testOutput]Executing foo() into noId with ack repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
repeat7{
 State: repeat7 (id_17[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_25[au](1): boolean)
 SkipCondition: Boolean constant false (id_23[au](0): boolean)
 StartCondition: Boolean constant true (id_25[au](1): boolean)
 EndCondition: Boolean constant true (id_25[au](1): boolean)
 ExitCondition: Boolean constant false (id_23[au](0): boolean)
 InvariantCondition: Boolean constant true (id_25[au](1): boolean)
 PreCondition: Boolean constant true (id_25[au](1): boolean)
 PostCondition: Boolean constant true (id_25[au](1): boolean)
 RepeatCondition: (id_66[iu](UNKNOWN): LookupOnChange(continue(), Real constant 0 (id_70[au](0): real)))
 ActionCompleteCondition: (id_62[iu](UNKNOWN): isknown(repeat7 command_handle (id_58[au](UNKNOWN): command_handle)))
 AbortCompleteCondition: repeat7 abortComplete (id_60[au](UNKNOWN): boolean)
 Command handle: repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
}

[Test:testOutput]Processing event: time() = 1
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: repeat7 
[PlexilExec:step][2:0:0] Transitioning node repeat7 from EXECUTING to FINISHING
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
repeat7{
 State: repeat7 (id_17[au](FINISHING): state) (1)
 AncestorEndCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_25[au](1): boolean)
 SkipCondition: Boolean constant false (id_23[au](0): boolean)
 StartCondition: Boolean constant true (id_25[au](1): boolean)
 EndCondition: Boolean constant true (id_25[au](1): boolean)
 ExitCondition: Boolean constant false (id_23[au](0): boolean)
 InvariantCondition: Boolean constant true (id_25[au](1): boolean)
 PreCondition: Boolean constant true (id_25[au](1): boolean)
 PostCondition: Boolean constant true (id_25[au](1): boolean)
 RepeatCondition: (id_66[iu](UNKNOWN): LookupOnChange(continue(), Real constant 0 (id_70[au](0): real)))
 ActionCompleteCondition: (id_62[au](0): isknown(repeat7 command_handle (id_58[au](UNKNOWN): command_handle)))
 AbortCompleteCondition: repeat7 abortComplete (id_60[au](UNKNOWN): boolean)
 Command handle: repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
}

[Test:testOutput]Sending command ACK foo() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 1
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:step][3:0] State change queue: repeat7 
[PlexilExec:step][3:0:0] Transitioning node repeat7 from FINISHING to ITERATION_ENDED
[Test:testOutput]Registering change lookup for continue()
[Test:testOutput]Looking up immediately continue()
[Test:testOutput]Returning value 1
[PlexilExec:step][3:1] State change queue: repeat7 
[PlexilExec:step][3:1:0] Transitioning node repeat7 from ITERATION_ENDED to WAITING
[PlexilExec:step][3:2] State change queue: repeat7 
[PlexilExec:step][3:2:0] Transitioning node repeat7 from WAITING to EXECUTING
[Test:testOutput]Executing foo() into noId with ack repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
repeat7{
 State: repeat7 (id_17[au](EXECUTING): state) (1)
 AncestorEndCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_25[au](1): boolean)
 SkipCondition: Boolean constant false (id_23[au](0): boolean)
 StartCondition: Boolean constant true (id_25[au](1): boolean)
 EndCondition: Boolean constant true (id_25[au](1): boolean)
 ExitCondition: Boolean constant false (id_23[au](0): boolean)
 InvariantCondition: Boolean constant true (id_25[au](1): boolean)
 PreCondition: Boolean constant true (id_25[au](1): boolean)
 PostCondition: Boolean constant true (id_25[au](1): boolean)
 RepeatCondition: (id_66[iu](UNKNOWN): LookupOnChange(continue(), Real constant 0 (id_70[au](0): real)))
 ActionCompleteCondition: (id_62[iu](UNKNOWN): isknown(repeat7 command_handle (id_58[au](UNKNOWN): command_handle)))
 AbortCompleteCondition: repeat7 abortComplete (id_60[au](UNKNOWN): boolean)
 Command handle: repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
}

[Test:testOutput]Sending command ACK foo() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 1
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:step][4:0] State change queue: repeat7 
[PlexilExec:step][4:0:0] Transitioning node repeat7 from EXECUTING to FINISHING
[PlexilExec:step][4:1] State change queue: repeat7 
[PlexilExec:step][4:1:0] Transitioning node repeat7 from FINISHING to ITERATION_ENDED
[Test:testOutput]Registering change lookup for continue()
[Test:testOutput]Looking up immediately continue()
[Test:testOutput]Returning value 1
[PlexilExec:step][4:2] State change queue: repeat7 
[PlexilExec:step][4:2:0] Transitioning node repeat7 from ITERATION_ENDED to WAITING
[PlexilExec:step][4:3] State change queue: repeat7 
[PlexilExec:step][4:3:0] Transitioning node repeat7 from WAITING to EXECUTING
[Test:testOutput]Executing foo() into noId with ack repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
repeat7{
 State: repeat7 (id_17[au](EXECUTING): state) (1)
 AncestorEndCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_25[au](1): boolean)
 SkipCondition: Boolean constant false (id_23[au](0): boolean)
 StartCondition: Boolean constant true (id_25[au](1): boolean)
 EndCondition: Boolean constant true (id_25[au](1): boolean)
 ExitCondition: Boolean constant false (id_23[au](0): boolean)
 InvariantCondition: Boolean constant true (id_25[au](1): boolean)
 PreCondition: Boolean constant true (id_25[au](1): boolean)
 PostCondition: Boolean constant true (id_25[au](1): boolean)
 RepeatCondition: (id_66[iu](UNKNOWN): LookupOnChange(continue(), Real constant 0 (id_70[au](0): real)))
 ActionCompleteCondition: (id_62[iu](UNKNOWN): isknown(repeat7 command_handle (id_58[au](UNKNOWN): command_handle)))
 AbortCompleteCondition: repeat7 abortComplete (id_60[au](UNKNOWN): boolean)
 Command handle: repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
}

[Test:testOutput]Sending command ACK foo() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 1
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:step][5:0] State change queue: repeat7 
[PlexilExec:step][5:0:0] Transitioning node repeat7 from EXECUTING to FINISHING
[PlexilExec:step][5:1] State change queue: repeat7 
[PlexilExec:step][5:1:0] Transitioning node repeat7 from FINISHING to ITERATION_ENDED
[Test:testOutput]Registering change lookup for continue()
[Test:testOutput]Looking up immediately continue()
[Test:testOutput]Returning value 1
[PlexilExec:step][5:2] State change queue: repeat7 
[PlexilExec:step][5:2:0] Transitioning node repeat7 from ITERATION_ENDED to WAITING
[PlexilExec:step][5:3] State change queue: repeat7 
[PlexilExec:step][5:3:0] Transitioning node repeat7 from WAITING to EXECUTING
[Test:testOutput]Executing foo() into noId with ack repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
repeat7{
 State: repeat7 (id_17[au](EXECUTING): state) (1)
 AncestorEndCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_25[au](1): boolean)
 SkipCondition: Boolean constant false (id_23[au](0): boolean)
 StartCondition: Boolean constant true (id_25[au](1): boolean)
 EndCondition: Boolean constant true (id_25[au](1): boolean)
 ExitCondition: Boolean constant false (id_23[au](0): boolean)
 InvariantCondition: Boolean constant true (id_25[au](1): boolean)
 PreCondition: Boolean constant true (id_25[au](1): boolean)
 PostCondition: Boolean constant true (id_25[au](1): boolean)
 RepeatCondition: (id_66[iu](UNKNOWN): LookupOnChange(continue(), Real constant 0 (id_70[au](0): real)))
 ActionCompleteCondition: (id_62[iu](UNKNOWN): isknown(repeat7 command_handle (id_58[au](UNKNOWN): command_handle)))
 AbortCompleteCondition: repeat7 abortComplete (id_60[au](UNKNOWN): boolean)
 Command handle: repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
}

[Test:testOutput]Sending command ACK foo() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 1
[PlexilExec:cycle]==>Start cycle 6
[PlexilExec:step][6:0] State change queue: repeat7 
[PlexilExec:step][6:0:0] Transitioning node repeat7 from EXECUTING to FINISHING
[PlexilExec:step][6:1] State change queue: repeat7 
[PlexilExec:step][6:1:0] Transitioning node repeat7 from FINISHING to ITERATION_ENDED
[Test:testOutput]Registering change lookup for continue()
[Test:testOutput]Looking up immediately continue()
[Test:testOutput]Returning value 1
[PlexilExec:step][6:2] State change queue: repeat7 
[PlexilExec:step][6:2:0] Transitioning node repeat7 from ITERATION_ENDED to WAITING
[PlexilExec:step][6:3] State change queue: repeat7 
[PlexilExec:step][6:3:0] Transitioning node repeat7 from WAITING to EXECUTING
[Test:testOutput]Executing foo() into noId with ack repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 6
[PlexilExec:printPlan]
repeat7{
 State: repeat7 (id_17[au](EXECUTING): state) (1)
 AncestorEndCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_25[au](1): boolean)
 SkipCondition: Boolean constant false (id_23[au](0): boolean)
 StartCondition: Boolean constant true (id_25[au](1): boolean)
 EndCondition: Boolean constant true (id_25[au](1): boolean)
 ExitCondition: Boolean constant false (id_23[au](0): boolean)
 InvariantCondition: Boolean constant true (id_25[au](1): boolean)
 PreCondition: Boolean constant true (id_25[au](1): boolean)
 PostCondition: Boolean constant true (id_25[au](1): boolean)
 RepeatCondition: (id_66[iu](UNKNOWN): LookupOnChange(continue(), Real constant 0 (id_70[au](0): real)))
 ActionCompleteCondition: (id_62[iu](UNKNOWN): isknown(repeat7 command_handle (id_58[au](UNKNOWN): command_handle)))
 AbortCompleteCondition: repeat7 abortComplete (id_60[au](UNKNOWN): boolean)
 Command handle: repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
}

[Test:testOutput]Processing event: continue() = 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 1
[PlexilExec:cycle]==>Start cycle 7
[PlexilExec:step][7:0] State change queue: repeat7 
[PlexilExec:step][7:0:0] Transitioning node repeat7 from EXECUTING to FINISHING
[PlexilExec:cycle]==>End cycle 7
[PlexilExec:printPlan]
repeat7{
 State: repeat7 (id_17[au](FINISHING): state) (1)
 AncestorEndCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_23[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_25[au](1): boolean)
 SkipCondition: Boolean constant false (id_23[au](0): boolean)
 StartCondition: Boolean constant true (id_25[au](1): boolean)
 EndCondition: Boolean constant true (id_25[au](1): boolean)
 ExitCondition: Boolean constant false (id_23[au](0): boolean)
 InvariantCondition: Boolean constant true (id_25[au](1): boolean)
 PreCondition: Boolean constant true (id_25[au](1): boolean)
 PostCondition: Boolean constant true (id_25[au](1): boolean)
 RepeatCondition: (id_66[iu](UNKNOWN): LookupOnChange(continue(), Real constant 0 (id_70[au](0): real)))
 ActionCompleteCondition: (id_62[au](0): isknown(repeat7 command_handle (id_58[au](UNKNOWN): command_handle)))
 AbortCompleteCondition: repeat7 abortComplete (id_60[au](UNKNOWN): boolean)
 Command handle: repeat7 command_handle (id_58[au](UNKNOWN): command_handle)
}

[Test:testOutput]Sending command ACK foo() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 1
[PlexilExec:cycle]==>Start cycle 8
[PlexilExec:step][8:0] State change queue: repeat7 
[PlexilExec:step][8:0:0] Transitioning node repeat7 from FINISHING to ITERATION_ENDED
[Test:testOutput]Registering change lookup for continue()
[Test:testOutput]Looking up immediately continue()
[Test:testOutput]Returning value 0
[PlexilExec:step][8:1] State change queue: repeat7 
[PlexilExec:step][8:1:0] Transitioning node repeat7 from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'repeat7' is SUCCESS
[PlexilExec:cycle]==>End cycle 8
[PlexilExec:printPlan]
repeat7{
 State: repeat7 (id_17[au](FINISHED): state) (1)
 Outcome: repeat7 (id_19[au](SUCCESS): outcome)
 Command handle: repeat7 command_handle (id_58[iu](COMMAND_SUCCESS): command_handle)
}

