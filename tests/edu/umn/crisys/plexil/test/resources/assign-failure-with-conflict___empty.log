
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: AssignFailureWithConflict 
[PlexilExec:step][1:0:0] Transitioning node AssignFailureWithConflict from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: AssignFailureWithConflict 
[PlexilExec:step][1:1:0] Transitioning node AssignFailureWithConflict from WAITING to EXECUTING
[PlexilExec:step][1:2] State change queue: theFailure theSpoiler theConflict 
[PlexilExec:step][1:2:0] Transitioning node theFailure from INACTIVE to WAITING
[PlexilExec:step][1:2:1] Transitioning node theSpoiler from INACTIVE to WAITING
[PlexilExec:step][1:2:2] Transitioning node theConflict from INACTIVE to WAITING
[PlexilExec:step][1:3] State change queue: theFailure theSpoiler 
[PlexilExec:step][1:3:0] Transitioning node theFailure from WAITING to EXECUTING
[PlexilExec:step][1:3:1] Transitioning node theSpoiler from WAITING to EXECUTING
[Test:testOutput]Assigning 'n' (n (id_46[au](0): int)) to 1
[Test:testOutput]Assigning 'spoil' (spoil (id_48[au](0): boolean)) to 1
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
AssignFailureWithConflict{
 State: AssignFailureWithConflict (id_36[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_42[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
 SkipCondition: Boolean constant false (id_42[au](0): boolean)
 StartCondition: Boolean constant true (id_44[au](1): boolean)
 EndCondition: (id_178[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_42[au](0): boolean)
 InvariantCondition: Boolean constant true (id_44[au](1): boolean)
 PreCondition: Boolean constant true (id_44[au](1): boolean)
 PostCondition: (id_185[iu](UNKNOWN): (n (id_46[au](1): int) == IntegerValue (id_187[au](2): int)))
 RepeatCondition: Boolean constant false (id_42[au](0): boolean)
 ActionCompleteCondition: (id_171[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 n: n (id_46[au](1): int)
 spoil: spoil (id_48[au](1): boolean)
  theFailure{
   State: theFailure (id_51[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_178[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
   SkipCondition: Boolean constant false (id_42[au](0): boolean)
   StartCondition: Boolean constant true (id_44[au](1): boolean)
   EndCondition: Boolean constant true (id_44[au](1): boolean)
   ExitCondition: Boolean constant false (id_42[au](0): boolean)
   InvariantCondition: (id_203[au](0): !spoil (id_48[au](1): boolean))
   PreCondition: Boolean constant true (id_44[au](1): boolean)
   PostCondition: Boolean constant true (id_44[au](1): boolean)
   RepeatCondition: Boolean constant false (id_42[au](0): boolean)
   ActionCompleteCondition: theFailure ack (id_195[au](1): boolean)
   AbortCompleteCondition: theFailure abortComplete (id_197[iu](UNKNOWN): boolean)
   n: n (id_46[au](1): int)
   spoil: spoil (id_48[au](1): boolean)
  }
  theSpoiler{
   State: theSpoiler (id_82[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_178[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
   SkipCondition: Boolean constant false (id_42[au](0): boolean)
   StartCondition: Boolean constant true (id_44[au](1): boolean)
   EndCondition: Boolean constant true (id_44[au](1): boolean)
   ExitCondition: Boolean constant false (id_42[au](0): boolean)
   InvariantCondition: Boolean constant true (id_44[au](1): boolean)
   PreCondition: Boolean constant true (id_44[au](1): boolean)
   PostCondition: Boolean constant true (id_44[au](1): boolean)
   RepeatCondition: Boolean constant false (id_42[au](0): boolean)
   ActionCompleteCondition: theSpoiler ack (id_209[au](1): boolean)
   AbortCompleteCondition: theSpoiler abortComplete (id_211[iu](UNKNOWN): boolean)
   spoil: spoil (id_48[au](1): boolean)
  }
  theConflict{
   State: theConflict (id_113[au](WAITING): state) (0)
   AncestorEndCondition: (id_178[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
   SkipCondition: Boolean constant false (id_42[au](0): boolean)
   StartCondition: spoil (id_48[au](1): boolean)
   EndCondition: Boolean constant true (id_44[au](1): boolean)
   ExitCondition: Boolean constant false (id_42[au](0): boolean)
   InvariantCondition: Boolean constant true (id_44[au](1): boolean)
   PreCondition: Boolean constant true (id_44[au](1): boolean)
   PostCondition: Boolean constant true (id_44[au](1): boolean)
   RepeatCondition: Boolean constant false (id_42[au](0): boolean)
   ActionCompleteCondition: theConflict ack (id_220[iu](UNKNOWN): boolean)
   AbortCompleteCondition: theConflict abortComplete (id_222[iu](UNKNOWN): boolean)
   n: n (id_46[au](1): int)
   spoil: spoil (id_48[au](1): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: theFailure theSpoiler 
[PlexilExec:step][2:0:0] Transitioning node theFailure from EXECUTING to FAILING
[PlexilExec:step][2:0:1] Transitioning node theSpoiler from EXECUTING to ITERATION_ENDED
[Test:testOutput]Restoring 'n' (n (id_46[au](1): int)) to 0
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
AssignFailureWithConflict{
 State: AssignFailureWithConflict (id_36[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_42[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
 SkipCondition: Boolean constant false (id_42[au](0): boolean)
 StartCondition: Boolean constant true (id_44[au](1): boolean)
 EndCondition: (id_178[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_42[au](0): boolean)
 InvariantCondition: Boolean constant true (id_44[au](1): boolean)
 PreCondition: Boolean constant true (id_44[au](1): boolean)
 PostCondition: (id_185[iu](UNKNOWN): (n (id_46[au](0): int) == IntegerValue (id_187[au](2): int)))
 RepeatCondition: Boolean constant false (id_42[au](0): boolean)
 ActionCompleteCondition: (id_171[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 n: n (id_46[au](0): int)
 spoil: spoil (id_48[au](1): boolean)
  theFailure{
   State: theFailure (id_51[au](FAILING): state) (0)
   AncestorEndCondition: (id_178[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
   SkipCondition: Boolean constant false (id_42[au](0): boolean)
   StartCondition: Boolean constant true (id_44[au](1): boolean)
   EndCondition: Boolean constant true (id_44[au](1): boolean)
   ExitCondition: Boolean constant false (id_42[au](0): boolean)
   InvariantCondition: (id_203[iu](UNKNOWN): !spoil (id_48[au](1): boolean))
   PreCondition: Boolean constant true (id_44[au](1): boolean)
   PostCondition: Boolean constant true (id_44[au](1): boolean)
   RepeatCondition: Boolean constant false (id_42[au](0): boolean)
   ActionCompleteCondition: theFailure ack (id_195[iu](1): boolean)
   AbortCompleteCondition: theFailure abortComplete (id_197[au](1): boolean)
   n: n (id_46[au](0): int)
   spoil: spoil (id_48[au](1): boolean)
  }
  theSpoiler{
   State: theSpoiler (id_82[au](ITERATION_ENDED): state) (0)
   AncestorEndCondition: (id_178[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
   SkipCondition: Boolean constant false (id_42[au](0): boolean)
   StartCondition: Boolean constant true (id_44[au](1): boolean)
   EndCondition: Boolean constant true (id_44[au](1): boolean)
   ExitCondition: Boolean constant false (id_42[au](0): boolean)
   InvariantCondition: Boolean constant true (id_44[au](1): boolean)
   PreCondition: Boolean constant true (id_44[au](1): boolean)
   PostCondition: Boolean constant true (id_44[au](1): boolean)
   RepeatCondition: Boolean constant false (id_42[au](0): boolean)
   ActionCompleteCondition: theSpoiler ack (id_209[iu](1): boolean)
   AbortCompleteCondition: theSpoiler abortComplete (id_211[iu](UNKNOWN): boolean)
   spoil: spoil (id_48[au](1): boolean)
  }
  theConflict{
   State: theConflict (id_113[au](WAITING): state) (0)
   AncestorEndCondition: (id_178[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
   SkipCondition: Boolean constant false (id_42[au](0): boolean)
   StartCondition: spoil (id_48[au](1): boolean)
   EndCondition: Boolean constant true (id_44[au](1): boolean)
   ExitCondition: Boolean constant false (id_42[au](0): boolean)
   InvariantCondition: Boolean constant true (id_44[au](1): boolean)
   PreCondition: Boolean constant true (id_44[au](1): boolean)
   PostCondition: Boolean constant true (id_44[au](1): boolean)
   RepeatCondition: Boolean constant false (id_42[au](0): boolean)
   ActionCompleteCondition: theConflict ack (id_220[iu](UNKNOWN): boolean)
   AbortCompleteCondition: theConflict abortComplete (id_222[iu](UNKNOWN): boolean)
   n: n (id_46[au](0): int)
   spoil: spoil (id_48[au](1): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:step][3:0] State change queue: theFailure theSpoiler theConflict 
[PlexilExec:step][3:0:0] Transitioning node theFailure from FAILING to ITERATION_ENDED
[PlexilExec:step][3:0:1] Transitioning node theSpoiler from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'theSpoiler' is SUCCESS
[PlexilExec:step][3:0:2] Transitioning node theConflict from WAITING to EXECUTING
[Test:testOutput]Assigning 'n' (n (id_46[au](0): int)) to 2
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
AssignFailureWithConflict{
 State: AssignFailureWithConflict (id_36[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_42[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
 SkipCondition: Boolean constant false (id_42[au](0): boolean)
 StartCondition: Boolean constant true (id_44[au](1): boolean)
 EndCondition: (id_178[au](0): childrenFinished(1:3))
 ExitCondition: Boolean constant false (id_42[au](0): boolean)
 InvariantCondition: Boolean constant true (id_44[au](1): boolean)
 PreCondition: Boolean constant true (id_44[au](1): boolean)
 PostCondition: (id_185[iu](UNKNOWN): (n (id_46[au](2): int) == IntegerValue (id_187[au](2): int)))
 RepeatCondition: Boolean constant false (id_42[au](0): boolean)
 ActionCompleteCondition: (id_171[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 n: n (id_46[au](2): int)
 spoil: spoil (id_48[au](1): boolean)
  theFailure{
   State: theFailure (id_51[au](ITERATION_ENDED): state) (0)
   AncestorEndCondition: (id_178[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
   SkipCondition: Boolean constant false (id_42[au](0): boolean)
   StartCondition: Boolean constant true (id_44[au](1): boolean)
   EndCondition: Boolean constant true (id_44[au](1): boolean)
   ExitCondition: Boolean constant false (id_42[au](0): boolean)
   InvariantCondition: (id_203[iu](UNKNOWN): !spoil (id_48[au](1): boolean))
   PreCondition: Boolean constant true (id_44[au](1): boolean)
   PostCondition: Boolean constant true (id_44[au](1): boolean)
   RepeatCondition: Boolean constant false (id_42[au](0): boolean)
   ActionCompleteCondition: theFailure ack (id_195[iu](1): boolean)
   AbortCompleteCondition: theFailure abortComplete (id_197[iu](1): boolean)
   n: n (id_46[au](2): int)
   spoil: spoil (id_48[au](1): boolean)
  }
  theSpoiler{
   State: theSpoiler (id_82[au](FINISHED): state) (0)
   Outcome: theSpoiler (id_84[au](SUCCESS): outcome)
   spoil: spoil (id_48[au](1): boolean)
  }
  theConflict{
   State: theConflict (id_113[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_178[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_42[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_44[au](1): boolean)
   SkipCondition: Boolean constant false (id_42[au](0): boolean)
   StartCondition: spoil (id_48[au](1): boolean)
   EndCondition: Boolean constant true (id_44[au](1): boolean)
   ExitCondition: Boolean constant false (id_42[au](0): boolean)
   InvariantCondition: Boolean constant true (id_44[au](1): boolean)
   PreCondition: Boolean constant true (id_44[au](1): boolean)
   PostCondition: Boolean constant true (id_44[au](1): boolean)
   RepeatCondition: Boolean constant false (id_42[au](0): boolean)
   ActionCompleteCondition: theConflict ack (id_220[au](1): boolean)
   AbortCompleteCondition: theConflict abortComplete (id_222[iu](UNKNOWN): boolean)
   n: n (id_46[au](2): int)
   spoil: spoil (id_48[au](1): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:step][4:0] State change queue: theFailure theConflict 
[PlexilExec:step][4:0:0] Transitioning node theFailure from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'theFailure' is FAILURE
[PlexilExec:step][4:0:1] Transitioning node theConflict from EXECUTING to ITERATION_ENDED
[PlexilExec:step][4:1] State change queue: theConflict 
[PlexilExec:step][4:1:0] Transitioning node theConflict from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'theConflict' is SUCCESS
[PlexilExec:step][4:2] State change queue: AssignFailureWithConflict 
[PlexilExec:step][4:2:0] Transitioning node AssignFailureWithConflict from EXECUTING to FINISHING
[PlexilExec:step][4:3] State change queue: AssignFailureWithConflict 
[PlexilExec:step][4:3:0] Transitioning node AssignFailureWithConflict from FINISHING to ITERATION_ENDED
[PlexilExec:step][4:4] State change queue: AssignFailureWithConflict 
[PlexilExec:step][4:4:0] Transitioning node AssignFailureWithConflict from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'AssignFailureWithConflict' is SUCCESS
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
AssignFailureWithConflict{
 State: AssignFailureWithConflict (id_36[au](FINISHED): state) (0)
 Outcome: AssignFailureWithConflict (id_38[au](SUCCESS): outcome)
 n: n (id_46[iu](2): int)
 spoil: spoil (id_48[iu](1): boolean)
  theFailure{
   State: theFailure (id_51[au](FINISHED): state) (0)
   Outcome: theFailure (id_53[au](FAILURE): outcome)
   Failure type: theFailure (id_55[au](INVARIANT_CONDITION_FAILED): failure)
   n: n (id_46[iu](2): int)
   spoil: spoil (id_48[iu](1): boolean)
  }
  theSpoiler{
   State: theSpoiler (id_82[au](FINISHED): state) (0)
   Outcome: theSpoiler (id_84[au](SUCCESS): outcome)
   spoil: spoil (id_48[iu](1): boolean)
  }
  theConflict{
   State: theConflict (id_113[au](FINISHED): state) (0)
   Outcome: theConflict (id_115[au](SUCCESS): outcome)
   n: n (id_46[iu](2): int)
   spoil: spoil (id_48[iu](1): boolean)
  }
}

