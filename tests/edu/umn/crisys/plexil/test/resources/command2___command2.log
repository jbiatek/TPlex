
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Creating initial state barfoo() = (string)the-command
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: Root 
[PlexilExec:step][1:0:0] Transitioning node Root from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: Root 
[PlexilExec:step][1:1:0] Transitioning node Root from WAITING to EXECUTING
[Test:testOutput]Looking up immediately barfoo()
[Test:testOutput]Returning value the-command
[Test:testOutput]Executing the-command() into noId with ack Root command_handle (id_67[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
Root{
 State: Root (id_20[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_26[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_26[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_28[au](1): boolean)
 SkipCondition: Boolean constant false (id_26[au](0): boolean)
 StartCondition: Boolean constant true (id_28[au](1): boolean)
 EndCondition: Boolean constant true (id_28[au](1): boolean)
 ExitCondition: Boolean constant false (id_26[au](0): boolean)
 InvariantCondition: Boolean constant true (id_28[au](1): boolean)
 PreCondition: Boolean constant true (id_28[au](1): boolean)
 PostCondition: Boolean constant true (id_28[au](1): boolean)
 RepeatCondition: Boolean constant false (id_26[au](0): boolean)
 ActionCompleteCondition: (id_71[iu](UNKNOWN): isknown(Root command_handle (id_67[au](UNKNOWN): command_handle)))
 AbortCompleteCondition: Root abortComplete (id_69[au](UNKNOWN): boolean)
 Command handle: Root command_handle (id_67[au](UNKNOWN): command_handle)
 CommandName: CommandName (id_30[au](foo): string)
}

[Test:testOutput]Sending command ACK the-command() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: Root 
[PlexilExec:step][2:0:0] Transitioning node Root from EXECUTING to FINISHING
[PlexilExec:step][2:1] State change queue: Root 
[PlexilExec:step][2:1:0] Transitioning node Root from FINISHING to ITERATION_ENDED
[PlexilExec:step][2:2] State change queue: Root 
[PlexilExec:step][2:2:0] Transitioning node Root from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'Root' is SUCCESS
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
Root{
 State: Root (id_20[au](FINISHED): state) (0)
 Outcome: Root (id_22[au](SUCCESS): outcome)
 Command handle: Root command_handle (id_67[iu](COMMAND_SUCCESS): command_handle)
 CommandName: CommandName (id_30[iu](foo): string)
}

