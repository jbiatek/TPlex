
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: Parent 
[PlexilExec:step][1:0:0] Transitioning node Parent from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: Parent 
[PlexilExec:step][1:1:0] Transitioning node Parent from WAITING to EXECUTING
[PlexilExec:step][1:2] State change queue: Child 
[PlexilExec:step][1:2:0] Transitioning node Child from INACTIVE to WAITING
[PlexilExec:step][1:3] State change queue: Child 
[PlexilExec:step][1:3:0] Transitioning node Child from WAITING to EXECUTING
[Test:testOutput]Assigning 'step_failed' (step_failed (id_38[au](0): boolean)) to 1
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
Parent{
 State: Parent (id_28[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
 SkipCondition: Boolean constant false (id_34[au](0): boolean)
 StartCondition: Boolean constant true (id_36[au](1): boolean)
 EndCondition: (id_114[au](0): (id_118[au](0): (Child (id_41[au](EXECUTING): state) == NodeStateValue (id_116[au](FINISHED): state))))
 ExitCondition: Boolean constant false (id_34[au](0): boolean)
 InvariantCondition: (id_109[au](0): (step_failed (id_38[au](1): boolean) == BooleanValue (id_111[au](0): boolean)))
 PreCondition: Boolean constant true (id_36[au](1): boolean)
 PostCondition: Boolean constant true (id_36[au](1): boolean)
 RepeatCondition: Boolean constant false (id_34[au](0): boolean)
 ActionCompleteCondition: (id_99[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 step_failed: step_failed (id_38[au](1): boolean)
  Child{
   State: Child (id_41[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_114[au](0): (id_118[au](0): (Child (id_41[au](EXECUTING): state) == NodeStateValue (id_116[au](FINISHED): state))))
   AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
   AncestorInvariantCondition: (id_109[au](0): (step_failed (id_38[au](1): boolean) == BooleanValue (id_111[au](0): boolean)))
   SkipCondition: Boolean constant false (id_34[au](0): boolean)
   StartCondition: Boolean constant true (id_36[au](1): boolean)
   EndCondition: Boolean constant true (id_36[au](1): boolean)
   ExitCondition: Boolean constant false (id_34[au](0): boolean)
   InvariantCondition: Boolean constant true (id_36[au](1): boolean)
   PreCondition: Boolean constant true (id_36[au](1): boolean)
   PostCondition: Boolean constant true (id_36[au](1): boolean)
   RepeatCondition: Boolean constant false (id_34[au](0): boolean)
   ActionCompleteCondition: Child ack (id_123[au](1): boolean)
   AbortCompleteCondition: Child abortComplete (id_125[iu](UNKNOWN): boolean)
   step_failed: step_failed (id_38[au](1): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: Child Parent 
[PlexilExec:step][2:0:0] Transitioning node Child from EXECUTING to FAILING
[PlexilExec:step][2:0:1] Transitioning node Parent from EXECUTING to FAILING
[Test:testOutput]Restoring 'step_failed' (step_failed (id_38[au](1): boolean)) to 0
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
Parent{
 State: Parent (id_28[au](FAILING): state) (0)
 AncestorEndCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_36[au](1): boolean)
 SkipCondition: Boolean constant false (id_34[au](0): boolean)
 StartCondition: Boolean constant true (id_36[au](1): boolean)
 EndCondition: (id_114[au](0): (id_118[au](0): (Child (id_41[au](FAILING): state) == NodeStateValue (id_116[au](FINISHED): state))))
 ExitCondition: Boolean constant false (id_34[au](0): boolean)
 InvariantCondition: (id_109[au](1): (step_failed (id_38[au](0): boolean) == BooleanValue (id_111[au](0): boolean)))
 PreCondition: Boolean constant true (id_36[au](1): boolean)
 PostCondition: Boolean constant true (id_36[au](1): boolean)
 RepeatCondition: Boolean constant false (id_34[au](0): boolean)
 ActionCompleteCondition: (id_99[au](0): childrenWaitingOrFinished(0:1))
 step_failed: step_failed (id_38[au](0): boolean)
  Child{
   State: Child (id_41[au](FAILING): state) (0)
   AncestorEndCondition: (id_114[au](0): (id_118[au](0): (Child (id_41[au](FAILING): state) == NodeStateValue (id_116[au](FINISHED): state))))
   AncestorExitCondition: Boolean constant false (id_34[au](0): boolean)
   AncestorInvariantCondition: (id_109[au](1): (step_failed (id_38[au](0): boolean) == BooleanValue (id_111[au](0): boolean)))
   SkipCondition: Boolean constant false (id_34[au](0): boolean)
   StartCondition: Boolean constant true (id_36[au](1): boolean)
   EndCondition: Boolean constant true (id_36[au](1): boolean)
   ExitCondition: Boolean constant false (id_34[au](0): boolean)
   InvariantCondition: Boolean constant true (id_36[au](1): boolean)
   PreCondition: Boolean constant true (id_36[au](1): boolean)
   PostCondition: Boolean constant true (id_36[au](1): boolean)
   RepeatCondition: Boolean constant false (id_34[au](0): boolean)
   ActionCompleteCondition: Child ack (id_123[iu](1): boolean)
   AbortCompleteCondition: Child abortComplete (id_125[au](1): boolean)
   step_failed: step_failed (id_38[au](0): boolean)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:step][3:0] State change queue: Child 
[PlexilExec:step][3:0:0] Transitioning node Child from FAILING to FINISHED
[Node:outcome]Outcome of 'Child' is FAILURE
[PlexilExec:step][3:1] State change queue: Parent 
[PlexilExec:step][3:1:0] Transitioning node Parent from FAILING to ITERATION_ENDED
[PlexilExec:step][3:2] State change queue: Parent 
[PlexilExec:step][3:2:0] Transitioning node Parent from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'Parent' is FAILURE
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
Parent{
 State: Parent (id_28[au](FINISHED): state) (0)
 Outcome: Parent (id_30[au](FAILURE): outcome)
 Failure type: Parent (id_32[au](INVARIANT_CONDITION_FAILED): failure)
 step_failed: step_failed (id_38[iu](0): boolean)
  Child{
   State: Child (id_41[au](FINISHED): state) (0)
   Outcome: Child (id_43[au](FAILURE): outcome)
   Failure type: Child (id_45[au](PARENT_FAILED): failure)
   step_failed: step_failed (id_38[iu](0): boolean)
  }
}

