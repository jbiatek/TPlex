
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Creating initial state time() = 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: Container 
[PlexilExec:step][1:0:0] Transitioning node Container from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: Container 
[PlexilExec:step][1:1:0] Transitioning node Container from WAITING to EXECUTING
[PlexilExec:step][1:2] State change queue: ParentNode Commander 
[PlexilExec:step][1:2:0] Transitioning node ParentNode from INACTIVE to WAITING
[PlexilExec:step][1:2:1] Transitioning node Commander from INACTIVE to WAITING
[PlexilExec:step][1:3] State change queue: ParentNode Commander 
[PlexilExec:step][1:3:0] Transitioning node ParentNode from WAITING to EXECUTING
[PlexilExec:step][1:3:1] Transitioning node Commander from WAITING to EXECUTING
[Test:testOutput]Executing doSomething() into noId with ack Commander command_handle (id_213[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
Container{
 State: Container (id_30[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_36[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_36[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_38[au](1): boolean)
 SkipCondition: Boolean constant false (id_36[au](0): boolean)
 StartCondition: Boolean constant true (id_38[au](1): boolean)
 EndCondition: (id_171[au](0): childrenFinished(0:2))
 ExitCondition: Boolean constant false (id_36[au](0): boolean)
 InvariantCondition: Boolean constant true (id_38[au](1): boolean)
 PreCondition: Boolean constant true (id_38[au](1): boolean)
 PostCondition: Boolean constant true (id_38[au](1): boolean)
 RepeatCondition: Boolean constant false (id_36[au](0): boolean)
 ActionCompleteCondition: (id_165[iu](UNKNOWN): childrenWaitingOrFinished(0:2))
  ParentNode{
   State: ParentNode (id_41[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_171[au](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_36[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_38[au](1): boolean)
   SkipCondition: Boolean constant false (id_36[au](0): boolean)
   StartCondition: Boolean constant true (id_38[au](1): boolean)
   EndCondition: (id_184[au](0): childrenFinished(0:1))
   ExitCondition: Boolean constant false (id_36[au](0): boolean)
   InvariantCondition: (id_189[au](UNKNOWN): ((id_191[au](UNKNOWN): !(id_193[au](UNKNOWN): ((id_195[au](UNKNOWN): (id_199[au](UNKNOWN): (ChildNode (id_50[au](UNKNOWN): outcome) == NodeOutcomeValue (id_197[au](FAILURE): outcome)))))))))
   PreCondition: Boolean constant true (id_38[au](1): boolean)
   PostCondition: Boolean constant true (id_38[au](1): boolean)
   RepeatCondition: Boolean constant false (id_36[au](0): boolean)
   ActionCompleteCondition: (id_179[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
    ChildNode{
     State: ChildNode (id_48[au](INACTIVE): state) (inf)
    }
  }
  Commander{
   State: Commander (id_103[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_171[au](0): childrenFinished(0:2))
   AncestorExitCondition: Boolean constant false (id_36[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_38[au](1): boolean)
   SkipCondition: Boolean constant false (id_36[au](0): boolean)
   StartCondition: Boolean constant true (id_38[au](1): boolean)
   EndCondition: (id_232[au](UNKNOWN): ((id_230[au](0): interruptibleCommandHandleValues(Commander command_handle (id_213[au](UNKNOWN): command_handle))) || (id_223[au](UNKNOWN): (id_227[au](UNKNOWN): (ParentNode (id_43[au](UNKNOWN): outcome) == NodeOutcomeValue (id_225[au](SUCCESS): outcome))))))
   ExitCondition: Boolean constant false (id_36[au](0): boolean)
   InvariantCondition: Boolean constant true (id_38[au](1): boolean)
   PreCondition: Boolean constant true (id_38[au](1): boolean)
   PostCondition: Boolean constant true (id_38[au](1): boolean)
   RepeatCondition: Boolean constant false (id_36[au](0): boolean)
   ActionCompleteCondition: (id_217[iu](UNKNOWN): isknown(Commander command_handle (id_213[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: Commander abortComplete (id_215[au](UNKNOWN): boolean)
   Command handle: Commander command_handle (id_213[au](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Processing event: time() = 1
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: ChildNode 
[PlexilExec:step][2:0:0] Transitioning node ChildNode from INACTIVE to WAITING
[PlexilExec:step][2:1] State change queue: ChildNode 
[PlexilExec:step][2:1:0] Transitioning node ChildNode from WAITING to EXECUTING
[PlexilExec:step][2:2] State change queue: ChildNode 
[PlexilExec:step][2:2:0] Transitioning node ChildNode from EXECUTING to ITERATION_ENDED
[PlexilExec:step][2:3] State change queue: ChildNode 
[PlexilExec:step][2:3:0] Transitioning node ChildNode from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'ChildNode' is SUCCESS
[PlexilExec:step][2:4] State change queue: ParentNode 
[PlexilExec:step][2:4:0] Transitioning node ParentNode from EXECUTING to FINISHING
[PlexilExec:step][2:5] State change queue: ParentNode 
[PlexilExec:step][2:5:0] Transitioning node ParentNode from FINISHING to ITERATION_ENDED
[PlexilExec:step][2:6] State change queue: Commander ParentNode 
[PlexilExec:step][2:6:0] Transitioning node Commander from EXECUTING to FINISHING
[PlexilExec:step][2:6:1] Transitioning node ParentNode from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'ParentNode' is SUCCESS
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
Container{
 State: Container (id_30[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_36[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_36[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_38[au](1): boolean)
 SkipCondition: Boolean constant false (id_36[au](0): boolean)
 StartCondition: Boolean constant true (id_38[au](1): boolean)
 EndCondition: (id_171[au](0): childrenFinished(1:2))
 ExitCondition: Boolean constant false (id_36[au](0): boolean)
 InvariantCondition: Boolean constant true (id_38[au](1): boolean)
 PreCondition: Boolean constant true (id_38[au](1): boolean)
 PostCondition: Boolean constant true (id_38[au](1): boolean)
 RepeatCondition: Boolean constant false (id_36[au](0): boolean)
 ActionCompleteCondition: (id_165[iu](UNKNOWN): childrenWaitingOrFinished(0:2))
  ParentNode{
   State: ParentNode (id_41[au](FINISHED): state) (1)
   Outcome: ParentNode (id_43[au](SUCCESS): outcome)
    ChildNode{
     State: ChildNode (id_48[au](FINISHED): state) (1)
     Outcome: ChildNode (id_50[au](SUCCESS): outcome)
    }
  }
  Commander{
   State: Commander (id_103[au](FINISHING): state) (1)
   AncestorEndCondition: (id_171[au](0): childrenFinished(1:2))
   AncestorExitCondition: Boolean constant false (id_36[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_38[au](1): boolean)
   SkipCondition: Boolean constant false (id_36[au](0): boolean)
   StartCondition: Boolean constant true (id_38[au](1): boolean)
   EndCondition: (id_232[iu](UNKNOWN): ((id_230[iu](UNKNOWN): interruptibleCommandHandleValues(Commander command_handle (id_213[au](UNKNOWN): command_handle))) || (id_223[iu](UNKNOWN): (id_227[iu](UNKNOWN): (ParentNode (id_43[au](SUCCESS): outcome) == NodeOutcomeValue (id_225[au](SUCCESS): outcome))))))
   ExitCondition: Boolean constant false (id_36[au](0): boolean)
   InvariantCondition: Boolean constant true (id_38[au](1): boolean)
   PreCondition: Boolean constant true (id_38[au](1): boolean)
   PostCondition: Boolean constant true (id_38[au](1): boolean)
   RepeatCondition: Boolean constant false (id_36[au](0): boolean)
   ActionCompleteCondition: (id_217[au](0): isknown(Commander command_handle (id_213[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: Commander abortComplete (id_215[au](UNKNOWN): boolean)
   Command handle: Commander command_handle (id_213[au](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Processing event: time() = 2
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
Container{
 State: Container (id_30[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_36[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_36[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_38[au](1): boolean)
 SkipCondition: Boolean constant false (id_36[au](0): boolean)
 StartCondition: Boolean constant true (id_38[au](1): boolean)
 EndCondition: (id_171[au](0): childrenFinished(1:2))
 ExitCondition: Boolean constant false (id_36[au](0): boolean)
 InvariantCondition: Boolean constant true (id_38[au](1): boolean)
 PreCondition: Boolean constant true (id_38[au](1): boolean)
 PostCondition: Boolean constant true (id_38[au](1): boolean)
 RepeatCondition: Boolean constant false (id_36[au](0): boolean)
 ActionCompleteCondition: (id_165[iu](UNKNOWN): childrenWaitingOrFinished(0:2))
  ParentNode{
   State: ParentNode (id_41[au](FINISHED): state) (1)
   Outcome: ParentNode (id_43[au](SUCCESS): outcome)
    ChildNode{
     State: ChildNode (id_48[au](FINISHED): state) (1)
     Outcome: ChildNode (id_50[au](SUCCESS): outcome)
    }
  }
  Commander{
   State: Commander (id_103[au](FINISHING): state) (1)
   AncestorEndCondition: (id_171[au](0): childrenFinished(1:2))
   AncestorExitCondition: Boolean constant false (id_36[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_38[au](1): boolean)
   SkipCondition: Boolean constant false (id_36[au](0): boolean)
   StartCondition: Boolean constant true (id_38[au](1): boolean)
   EndCondition: (id_232[iu](UNKNOWN): ((id_230[iu](UNKNOWN): interruptibleCommandHandleValues(Commander command_handle (id_213[au](UNKNOWN): command_handle))) || (id_223[iu](UNKNOWN): (id_227[iu](UNKNOWN): (ParentNode (id_43[au](SUCCESS): outcome) == NodeOutcomeValue (id_225[au](SUCCESS): outcome))))))
   ExitCondition: Boolean constant false (id_36[au](0): boolean)
   InvariantCondition: Boolean constant true (id_38[au](1): boolean)
   PreCondition: Boolean constant true (id_38[au](1): boolean)
   PostCondition: Boolean constant true (id_38[au](1): boolean)
   RepeatCondition: Boolean constant false (id_36[au](0): boolean)
   ActionCompleteCondition: (id_217[au](0): isknown(Commander command_handle (id_213[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: Commander abortComplete (id_215[au](UNKNOWN): boolean)
   Command handle: Commander command_handle (id_213[au](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Processing event: time() = 3
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
Container{
 State: Container (id_30[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_36[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_36[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_38[au](1): boolean)
 SkipCondition: Boolean constant false (id_36[au](0): boolean)
 StartCondition: Boolean constant true (id_38[au](1): boolean)
 EndCondition: (id_171[au](0): childrenFinished(1:2))
 ExitCondition: Boolean constant false (id_36[au](0): boolean)
 InvariantCondition: Boolean constant true (id_38[au](1): boolean)
 PreCondition: Boolean constant true (id_38[au](1): boolean)
 PostCondition: Boolean constant true (id_38[au](1): boolean)
 RepeatCondition: Boolean constant false (id_36[au](0): boolean)
 ActionCompleteCondition: (id_165[iu](UNKNOWN): childrenWaitingOrFinished(0:2))
  ParentNode{
   State: ParentNode (id_41[au](FINISHED): state) (1)
   Outcome: ParentNode (id_43[au](SUCCESS): outcome)
    ChildNode{
     State: ChildNode (id_48[au](FINISHED): state) (1)
     Outcome: ChildNode (id_50[au](SUCCESS): outcome)
    }
  }
  Commander{
   State: Commander (id_103[au](FINISHING): state) (1)
   AncestorEndCondition: (id_171[au](0): childrenFinished(1:2))
   AncestorExitCondition: Boolean constant false (id_36[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_38[au](1): boolean)
   SkipCondition: Boolean constant false (id_36[au](0): boolean)
   StartCondition: Boolean constant true (id_38[au](1): boolean)
   EndCondition: (id_232[iu](UNKNOWN): ((id_230[iu](UNKNOWN): interruptibleCommandHandleValues(Commander command_handle (id_213[au](UNKNOWN): command_handle))) || (id_223[iu](UNKNOWN): (id_227[iu](UNKNOWN): (ParentNode (id_43[au](SUCCESS): outcome) == NodeOutcomeValue (id_225[au](SUCCESS): outcome))))))
   ExitCondition: Boolean constant false (id_36[au](0): boolean)
   InvariantCondition: Boolean constant true (id_38[au](1): boolean)
   PreCondition: Boolean constant true (id_38[au](1): boolean)
   PostCondition: Boolean constant true (id_38[au](1): boolean)
   RepeatCondition: Boolean constant false (id_36[au](0): boolean)
   ActionCompleteCondition: (id_217[au](0): isknown(Commander command_handle (id_213[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: Commander abortComplete (id_215[au](UNKNOWN): boolean)
   Command handle: Commander command_handle (id_213[au](UNKNOWN): command_handle)
  }
}

[Test:testOutput]Sending command ACK doSomething() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 3
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:step][5:0] State change queue: Commander 
[PlexilExec:step][5:0:0] Transitioning node Commander from FINISHING to ITERATION_ENDED
[PlexilExec:step][5:1] State change queue: Commander 
[PlexilExec:step][5:1:0] Transitioning node Commander from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'Commander' is SUCCESS
[PlexilExec:step][5:2] State change queue: Container 
[PlexilExec:step][5:2:0] Transitioning node Container from EXECUTING to FINISHING
[PlexilExec:step][5:3] State change queue: Container 
[PlexilExec:step][5:3:0] Transitioning node Container from FINISHING to ITERATION_ENDED
[PlexilExec:step][5:4] State change queue: Container 
[PlexilExec:step][5:4:0] Transitioning node Container from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'Container' is SUCCESS
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
Container{
 State: Container (id_30[au](FINISHED): state) (3)
 Outcome: Container (id_32[au](SUCCESS): outcome)
  ParentNode{
   State: ParentNode (id_41[au](FINISHED): state) (1)
   Outcome: ParentNode (id_43[au](SUCCESS): outcome)
    ChildNode{
     State: ChildNode (id_48[au](FINISHED): state) (1)
     Outcome: ChildNode (id_50[au](SUCCESS): outcome)
    }
  }
  Commander{
   State: Commander (id_103[au](FINISHED): state) (3)
   Outcome: Commander (id_105[au](SUCCESS): outcome)
   Command handle: Commander command_handle (id_213[iu](COMMAND_SUCCESS): command_handle)
  }
}

