
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: Increment-test2 
[PlexilExec:step][1:0:0] Transitioning node Increment-test2 from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: Increment-test2 
[PlexilExec:step][1:1:0] Transitioning node Increment-test2 from WAITING to EXECUTING
[PlexilExec:step][1:2] State change queue: Increment 
[PlexilExec:step][1:2:0] Transitioning node Increment from INACTIVE to WAITING
[PlexilExec:step][1:3] State change queue: Increment 
[PlexilExec:step][1:3:0] Transitioning node Increment from WAITING to EXECUTING
[Test:testOutput]Assigning 'result' (result (id_42[au](0): int)) to 3
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
Increment-test2{
 State: Increment-test2 (id_32[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_38[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_38[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_40[au](1): boolean)
 SkipCondition: Boolean constant false (id_38[au](0): boolean)
 StartCondition: Boolean constant true (id_40[au](1): boolean)
 EndCondition: (id_122[au](1): (result (id_42[au](3): int) == IntegerValue (id_124[au](3): int)))
 ExitCondition: Boolean constant false (id_38[au](0): boolean)
 InvariantCondition: Boolean constant true (id_40[au](1): boolean)
 PreCondition: Boolean constant true (id_40[au](1): boolean)
 PostCondition: Boolean constant true (id_40[au](1): boolean)
 RepeatCondition: Boolean constant false (id_38[au](0): boolean)
 ActionCompleteCondition: (id_112[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 result: result (id_42[au](3): int)
  Increment{
   State: Increment (id_54[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_122[au](1): (result (id_42[au](3): int) == IntegerValue (id_124[au](3): int)))
   AncestorExitCondition: Boolean constant false (id_38[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_40[au](1): boolean)
   SkipCondition: Boolean constant false (id_38[au](0): boolean)
   StartCondition: Boolean constant true (id_40[au](1): boolean)
   EndCondition: Boolean constant true (id_40[au](1): boolean)
   ExitCondition: Boolean constant false (id_38[au](0): boolean)
   InvariantCondition: Boolean constant true (id_40[au](1): boolean)
   PreCondition: Boolean constant true (id_40[au](1): boolean)
   PostCondition: Boolean constant true (id_40[au](1): boolean)
   RepeatCondition: Boolean constant false (id_38[au](0): boolean)
   ActionCompleteCondition: Increment ack (id_131[au](1): boolean)
   AbortCompleteCondition: Increment abortComplete (id_133[iu](UNKNOWN): boolean)
   result: result (id_42[au](3): int)
   x: x (id_50[au](2): const AliasVariable for (id_44[au](2): (IntegerValue (id_46[au](1): int) + IntegerValue (id_48[au](1): int))))
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: Increment Increment-test2 
[PlexilExec:step][2:0:0] Transitioning node Increment from EXECUTING to ITERATION_ENDED
[PlexilExec:step][2:0:1] Transitioning node Increment-test2 from EXECUTING to FINISHING
[PlexilExec:step][2:1] State change queue: Increment 
[PlexilExec:step][2:1:0] Transitioning node Increment from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'Increment' is SUCCESS
[PlexilExec:step][2:2] State change queue: Increment-test2 
[PlexilExec:step][2:2:0] Transitioning node Increment-test2 from FINISHING to ITERATION_ENDED
[PlexilExec:step][2:3] State change queue: Increment-test2 
[PlexilExec:step][2:3:0] Transitioning node Increment-test2 from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'Increment-test2' is SUCCESS
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
Increment-test2{
 State: Increment-test2 (id_32[au](FINISHED): state) (0)
 Outcome: Increment-test2 (id_34[au](SUCCESS): outcome)
 result: result (id_42[iu](3): int)
  Increment{
   State: Increment (id_54[au](FINISHED): state) (0)
   Outcome: Increment (id_56[au](SUCCESS): outcome)
   result: result (id_42[iu](3): int)
   x: x (id_50[iu](UNKNOWN): const AliasVariable for (id_44[iu](UNKNOWN): (IntegerValue (id_46[au](1): int) + IntegerValue (id_48[au](1): int))))
  }
}

