
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: TestArrays 
[PlexilExec:step][1:0:0] Transitioning node TestArrays from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: TestArrays 
[PlexilExec:step][1:1:0] Transitioning node TestArrays from WAITING to EXECUTING
[PlexilExec:step][1:2] State change queue: testIntStateVariable callBoolArrayCommand testCallBoolArrayCommand 
[PlexilExec:step][1:2:0] Transitioning node testIntStateVariable from INACTIVE to WAITING
[Test:testOutput]Registering change lookup for stateInteger()
[Test:testOutput]Looking up immediately stateInteger()
[Test:testOutput]Returning value UNKNOWN
[PlexilExec:step][1:2:1] Transitioning node callBoolArrayCommand from INACTIVE to WAITING
[PlexilExec:step][1:2:2] Transitioning node testCallBoolArrayCommand from INACTIVE to WAITING
[PlexilExec:step][1:3] State change queue: callBoolArrayCommand 
[PlexilExec:step][1:3:0] Transitioning node callBoolArrayCommand from WAITING to EXECUTING
[Test:testOutput]Executing boolArrayCommand() into myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array) with ack callBoolArrayCommand command_handle (id_333[au](UNKNOWN): command_handle)
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
TestArrays{
 State: TestArrays (id_75[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_81[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
 SkipCondition: Boolean constant false (id_81[au](0): boolean)
 StartCondition: (id_230[iu](UNKNOWN): ((id_232[iu](UNKNOWN): ((id_234[iu](UNKNOWN): ArrayElement: myStringArray (id_87[au](Array: ["string 1", "string 2", <unknown>]): array)[IntegerValue (id_238[au](0): int)]) == StringValue (id_240[au](string 1): string))) && (id_242[iu](UNKNOWN): !(id_244[iu](UNKNOWN): isknown((id_246[iu](UNKNOWN): ArrayElement: myStringArray (id_87[au](Array: ["string 1", "string 2", <unknown>]): array)[IntegerValue (id_250[au](2): int)])))) && (id_252[iu](UNKNOWN): ((id_254[iu](UNKNOWN): ArrayElement: myRealArray (id_90[au](Array: [1.1, 2.2, <unknown>]): array)[IntegerValue (id_258[au](0): int)]) == RealValue (id_260[au](1.1): real))) && (id_262[iu](UNKNOWN): !(id_264[iu](UNKNOWN): isknown((id_266[iu](UNKNOWN): ArrayElement: myRealArray (id_90[au](Array: [1.1, 2.2, <unknown>]): array)[IntegerValue (id_270[au](2): int)])))) && (id_272[iu](UNKNOWN): ((id_274[iu](UNKNOWN): ArrayElement: myIntegerArray (id_93[au](Array: [1, 2, <unknown>]): array)[IntegerValue (id_278[au](0): int)]) == IntegerValue (id_280[au](1): int))) && (id_282[iu](UNKNOWN): !(id_284[iu](UNKNOWN): isknown((id_286[iu](UNKNOWN): ArrayElement: myIntegerArray (id_93[au](Array: [1, 2, <unknown>]): array)[IntegerValue (id_290[au](2): int)])))) && (id_292[iu](UNKNOWN): ArrayElement: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)[IntegerValue (id_296[au](0): int)]) && (id_298[iu](UNKNOWN): !(id_300[iu](UNKNOWN): ArrayElement: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)[IntegerValue (id_304[au](1): int)])) && (id_306[iu](UNKNOWN): !(id_308[iu](UNKNOWN): isknown((id_310[iu](UNKNOWN): ArrayElement: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)[IntegerValue (id_314[au](2): int)]))))))
 EndCondition: (id_223[au](0): childrenFinished(0:3))
 ExitCondition: Boolean constant false (id_81[au](0): boolean)
 InvariantCondition: Boolean constant true (id_83[au](1): boolean)
 PreCondition: Boolean constant true (id_83[au](1): boolean)
 PostCondition: Boolean constant true (id_83[au](1): boolean)
 RepeatCondition: Boolean constant false (id_81[au](0): boolean)
 ActionCompleteCondition: (id_216[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 myBooleanArray: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)
 myIntegerArray: myIntegerArray (id_93[au](Array: [1, 2, <unknown>]): array)
 myRealArray: myRealArray (id_90[au](Array: [1.1, 2.2, <unknown>]): array)
 myStringArray: myStringArray (id_87[au](Array: ["string 1", "string 2", <unknown>]): array)
 x: x (id_85[au](4): int)
  testIntStateVariable{
   State: testIntStateVariable (id_100[au](WAITING): state) (0)
   AncestorEndCondition: (id_223[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
   SkipCondition: Boolean constant false (id_81[au](0): boolean)
   StartCondition: (id_319[au](UNKNOWN): ((id_321[au](UNKNOWN): LookupOnChange(stateInteger(), Real constant 0 (id_325[au](0): real))) == IntegerValue (id_327[au](100): int)))
   EndCondition: Boolean constant true (id_83[au](1): boolean)
   ExitCondition: Boolean constant false (id_81[au](0): boolean)
   InvariantCondition: Boolean constant true (id_83[au](1): boolean)
   PreCondition: Boolean constant true (id_83[au](1): boolean)
   PostCondition: Boolean constant true (id_83[au](1): boolean)
   RepeatCondition: Boolean constant false (id_81[au](0): boolean)
  }
  callBoolArrayCommand{
   State: callBoolArrayCommand (id_127[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_223[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
   SkipCondition: Boolean constant false (id_81[au](0): boolean)
   StartCondition: Boolean constant true (id_83[au](1): boolean)
   EndCondition: Boolean constant true (id_83[au](1): boolean)
   ExitCondition: Boolean constant false (id_81[au](0): boolean)
   InvariantCondition: Boolean constant true (id_83[au](1): boolean)
   PreCondition: Boolean constant true (id_83[au](1): boolean)
   PostCondition: Boolean constant true (id_83[au](1): boolean)
   RepeatCondition: Boolean constant false (id_81[au](0): boolean)
   ActionCompleteCondition: (id_337[iu](UNKNOWN): isknown(callBoolArrayCommand command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: callBoolArrayCommand abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: callBoolArrayCommand command_handle (id_333[au](UNKNOWN): command_handle)
   myBooleanArray: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)
  }
  testCallBoolArrayCommand{
   State: testCallBoolArrayCommand (id_162[au](WAITING): state) (0)
   AncestorEndCondition: (id_223[au](0): childrenFinished(0:3))
   AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
   SkipCondition: Boolean constant false (id_81[au](0): boolean)
   StartCondition: (id_345[au](0): ((id_347[au](UNKNOWN): (id_351[au](UNKNOWN): (callBoolArrayCommand (id_129[au](UNKNOWN): outcome) == NodeOutcomeValue (id_349[au](SUCCESS): outcome)))) && (id_353[au](0): ArrayElement: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)[IntegerValue (id_357[au](1): int)])))
   EndCondition: Boolean constant true (id_83[au](1): boolean)
   ExitCondition: Boolean constant false (id_81[au](0): boolean)
   InvariantCondition: Boolean constant true (id_83[au](1): boolean)
   PreCondition: Boolean constant true (id_83[au](1): boolean)
   PostCondition: Boolean constant true (id_83[au](1): boolean)
   RepeatCondition: Boolean constant false (id_81[au](0): boolean)
   myBooleanArray: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)
  }
}

[Test:testOutput]Processing event: stateInteger() = 100
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: callBoolArrayCommand testIntStateVariable 
[PlexilExec:step][2:0:0] Transitioning node callBoolArrayCommand from EXECUTING to FINISHING
[PlexilExec:step][2:0:1] Transitioning node testIntStateVariable from WAITING to EXECUTING
[PlexilExec:step][2:1] State change queue: testIntStateVariable 
[PlexilExec:step][2:1:0] Transitioning node testIntStateVariable from EXECUTING to ITERATION_ENDED
[PlexilExec:step][2:2] State change queue: testIntStateVariable 
[PlexilExec:step][2:2:0] Transitioning node testIntStateVariable from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'testIntStateVariable' is SUCCESS
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
TestArrays{
 State: TestArrays (id_75[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_81[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
 SkipCondition: Boolean constant false (id_81[au](0): boolean)
 StartCondition: (id_230[iu](UNKNOWN): ((id_232[iu](UNKNOWN): ((id_234[iu](UNKNOWN): ArrayElement: myStringArray (id_87[au](Array: ["string 1", "string 2", <unknown>]): array)[IntegerValue (id_238[au](0): int)]) == StringValue (id_240[au](string 1): string))) && (id_242[iu](UNKNOWN): !(id_244[iu](UNKNOWN): isknown((id_246[iu](UNKNOWN): ArrayElement: myStringArray (id_87[au](Array: ["string 1", "string 2", <unknown>]): array)[IntegerValue (id_250[au](2): int)])))) && (id_252[iu](UNKNOWN): ((id_254[iu](UNKNOWN): ArrayElement: myRealArray (id_90[au](Array: [1.1, 2.2, <unknown>]): array)[IntegerValue (id_258[au](0): int)]) == RealValue (id_260[au](1.1): real))) && (id_262[iu](UNKNOWN): !(id_264[iu](UNKNOWN): isknown((id_266[iu](UNKNOWN): ArrayElement: myRealArray (id_90[au](Array: [1.1, 2.2, <unknown>]): array)[IntegerValue (id_270[au](2): int)])))) && (id_272[iu](UNKNOWN): ((id_274[iu](UNKNOWN): ArrayElement: myIntegerArray (id_93[au](Array: [1, 2, <unknown>]): array)[IntegerValue (id_278[au](0): int)]) == IntegerValue (id_280[au](1): int))) && (id_282[iu](UNKNOWN): !(id_284[iu](UNKNOWN): isknown((id_286[iu](UNKNOWN): ArrayElement: myIntegerArray (id_93[au](Array: [1, 2, <unknown>]): array)[IntegerValue (id_290[au](2): int)])))) && (id_292[iu](UNKNOWN): ArrayElement: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)[IntegerValue (id_296[au](0): int)]) && (id_298[iu](UNKNOWN): !(id_300[iu](UNKNOWN): ArrayElement: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)[IntegerValue (id_304[au](1): int)])) && (id_306[iu](UNKNOWN): !(id_308[iu](UNKNOWN): isknown((id_310[iu](UNKNOWN): ArrayElement: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)[IntegerValue (id_314[au](2): int)]))))))
 EndCondition: (id_223[au](0): childrenFinished(1:3))
 ExitCondition: Boolean constant false (id_81[au](0): boolean)
 InvariantCondition: Boolean constant true (id_83[au](1): boolean)
 PreCondition: Boolean constant true (id_83[au](1): boolean)
 PostCondition: Boolean constant true (id_83[au](1): boolean)
 RepeatCondition: Boolean constant false (id_81[au](0): boolean)
 ActionCompleteCondition: (id_216[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 myBooleanArray: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)
 myIntegerArray: myIntegerArray (id_93[au](Array: [1, 2, <unknown>]): array)
 myRealArray: myRealArray (id_90[au](Array: [1.1, 2.2, <unknown>]): array)
 myStringArray: myStringArray (id_87[au](Array: ["string 1", "string 2", <unknown>]): array)
 x: x (id_85[au](4): int)
  testIntStateVariable{
   State: testIntStateVariable (id_100[au](FINISHED): state) (0)
   Outcome: testIntStateVariable (id_102[au](SUCCESS): outcome)
  }
  callBoolArrayCommand{
   State: callBoolArrayCommand (id_127[au](FINISHING): state) (0)
   AncestorEndCondition: (id_223[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
   SkipCondition: Boolean constant false (id_81[au](0): boolean)
   StartCondition: Boolean constant true (id_83[au](1): boolean)
   EndCondition: Boolean constant true (id_83[au](1): boolean)
   ExitCondition: Boolean constant false (id_81[au](0): boolean)
   InvariantCondition: Boolean constant true (id_83[au](1): boolean)
   PreCondition: Boolean constant true (id_83[au](1): boolean)
   PostCondition: Boolean constant true (id_83[au](1): boolean)
   RepeatCondition: Boolean constant false (id_81[au](0): boolean)
   ActionCompleteCondition: (id_337[au](0): isknown(callBoolArrayCommand command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: callBoolArrayCommand abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: callBoolArrayCommand command_handle (id_333[au](UNKNOWN): command_handle)
   myBooleanArray: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)
  }
  testCallBoolArrayCommand{
   State: testCallBoolArrayCommand (id_162[au](WAITING): state) (0)
   AncestorEndCondition: (id_223[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
   SkipCondition: Boolean constant false (id_81[au](0): boolean)
   StartCondition: (id_345[au](0): ((id_347[au](UNKNOWN): (id_351[au](UNKNOWN): (callBoolArrayCommand (id_129[au](UNKNOWN): outcome) == NodeOutcomeValue (id_349[au](SUCCESS): outcome)))) && (id_353[au](0): ArrayElement: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)[IntegerValue (id_357[au](1): int)])))
   EndCondition: Boolean constant true (id_83[au](1): boolean)
   ExitCondition: Boolean constant false (id_81[au](0): boolean)
   InvariantCondition: Boolean constant true (id_83[au](1): boolean)
   PreCondition: Boolean constant true (id_83[au](1): boolean)
   PostCondition: Boolean constant true (id_83[au](1): boolean)
   RepeatCondition: Boolean constant false (id_81[au](0): boolean)
   myBooleanArray: myBooleanArray (id_96[au](Array: [1, 0, <unknown>]): array)
  }
}

[Test:testOutput]Sending command result boolArrayCommand() = 5.97819e-322
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
TestArrays{
 State: TestArrays (id_75[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_81[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
 SkipCondition: Boolean constant false (id_81[au](0): boolean)
 StartCondition: (id_230[iu](UNKNOWN): ((id_232[iu](UNKNOWN): ((id_234[iu](UNKNOWN): ArrayElement: myStringArray (id_87[au](Array: ["string 1", "string 2", <unknown>]): array)[IntegerValue (id_238[au](0): int)]) == StringValue (id_240[au](string 1): string))) && (id_242[iu](UNKNOWN): !(id_244[iu](UNKNOWN): isknown((id_246[iu](UNKNOWN): ArrayElement: myStringArray (id_87[au](Array: ["string 1", "string 2", <unknown>]): array)[IntegerValue (id_250[au](2): int)])))) && (id_252[iu](UNKNOWN): ((id_254[iu](UNKNOWN): ArrayElement: myRealArray (id_90[au](Array: [1.1, 2.2, <unknown>]): array)[IntegerValue (id_258[au](0): int)]) == RealValue (id_260[au](1.1): real))) && (id_262[iu](UNKNOWN): !(id_264[iu](UNKNOWN): isknown((id_266[iu](UNKNOWN): ArrayElement: myRealArray (id_90[au](Array: [1.1, 2.2, <unknown>]): array)[IntegerValue (id_270[au](2): int)])))) && (id_272[iu](UNKNOWN): ((id_274[iu](UNKNOWN): ArrayElement: myIntegerArray (id_93[au](Array: [1, 2, <unknown>]): array)[IntegerValue (id_278[au](0): int)]) == IntegerValue (id_280[au](1): int))) && (id_282[iu](UNKNOWN): !(id_284[iu](UNKNOWN): isknown((id_286[iu](UNKNOWN): ArrayElement: myIntegerArray (id_93[au](Array: [1, 2, <unknown>]): array)[IntegerValue (id_290[au](2): int)])))) && (id_292[iu](UNKNOWN): ArrayElement: myBooleanArray (id_96[au](Array: [1, 1, 1]): array)[IntegerValue (id_296[au](0): int)]) && (id_298[iu](UNKNOWN): !(id_300[iu](UNKNOWN): ArrayElement: myBooleanArray (id_96[au](Array: [1, 1, 1]): array)[IntegerValue (id_304[au](1): int)])) && (id_306[iu](UNKNOWN): !(id_308[iu](UNKNOWN): isknown((id_310[iu](UNKNOWN): ArrayElement: myBooleanArray (id_96[au](Array: [1, 1, 1]): array)[IntegerValue (id_314[au](2): int)]))))))
 EndCondition: (id_223[au](0): childrenFinished(1:3))
 ExitCondition: Boolean constant false (id_81[au](0): boolean)
 InvariantCondition: Boolean constant true (id_83[au](1): boolean)
 PreCondition: Boolean constant true (id_83[au](1): boolean)
 PostCondition: Boolean constant true (id_83[au](1): boolean)
 RepeatCondition: Boolean constant false (id_81[au](0): boolean)
 ActionCompleteCondition: (id_216[iu](UNKNOWN): childrenWaitingOrFinished(0:3))
 myBooleanArray: myBooleanArray (id_96[au](Array: [1, 1, 1]): array)
 myIntegerArray: myIntegerArray (id_93[au](Array: [1, 2, <unknown>]): array)
 myRealArray: myRealArray (id_90[au](Array: [1.1, 2.2, <unknown>]): array)
 myStringArray: myStringArray (id_87[au](Array: ["string 1", "string 2", <unknown>]): array)
 x: x (id_85[au](4): int)
  testIntStateVariable{
   State: testIntStateVariable (id_100[au](FINISHED): state) (0)
   Outcome: testIntStateVariable (id_102[au](SUCCESS): outcome)
  }
  callBoolArrayCommand{
   State: callBoolArrayCommand (id_127[au](FINISHING): state) (0)
   AncestorEndCondition: (id_223[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
   SkipCondition: Boolean constant false (id_81[au](0): boolean)
   StartCondition: Boolean constant true (id_83[au](1): boolean)
   EndCondition: Boolean constant true (id_83[au](1): boolean)
   ExitCondition: Boolean constant false (id_81[au](0): boolean)
   InvariantCondition: Boolean constant true (id_83[au](1): boolean)
   PreCondition: Boolean constant true (id_83[au](1): boolean)
   PostCondition: Boolean constant true (id_83[au](1): boolean)
   RepeatCondition: Boolean constant false (id_81[au](0): boolean)
   ActionCompleteCondition: (id_337[au](0): isknown(callBoolArrayCommand command_handle (id_333[au](UNKNOWN): command_handle)))
   AbortCompleteCondition: callBoolArrayCommand abortComplete (id_335[au](UNKNOWN): boolean)
   Command handle: callBoolArrayCommand command_handle (id_333[au](UNKNOWN): command_handle)
   myBooleanArray: myBooleanArray (id_96[au](Array: [1, 1, 1]): array)
  }
  testCallBoolArrayCommand{
   State: testCallBoolArrayCommand (id_162[au](WAITING): state) (0)
   AncestorEndCondition: (id_223[au](0): childrenFinished(1:3))
   AncestorExitCondition: Boolean constant false (id_81[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_83[au](1): boolean)
   SkipCondition: Boolean constant false (id_81[au](0): boolean)
   StartCondition: (id_345[au](UNKNOWN): ((id_347[au](UNKNOWN): (id_351[au](UNKNOWN): (callBoolArrayCommand (id_129[au](UNKNOWN): outcome) == NodeOutcomeValue (id_349[au](SUCCESS): outcome)))) && (id_353[au](1): ArrayElement: myBooleanArray (id_96[au](Array: [1, 1, 1]): array)[IntegerValue (id_357[au](1): int)])))
   EndCondition: Boolean constant true (id_83[au](1): boolean)
   ExitCondition: Boolean constant false (id_81[au](0): boolean)
   InvariantCondition: Boolean constant true (id_83[au](1): boolean)
   PreCondition: Boolean constant true (id_83[au](1): boolean)
   PostCondition: Boolean constant true (id_83[au](1): boolean)
   RepeatCondition: Boolean constant false (id_81[au](0): boolean)
   myBooleanArray: myBooleanArray (id_96[au](Array: [1, 1, 1]): array)
  }
}

[Test:testOutput]Sending command ACK boolArrayCommand() = (string)COMMAND_SUCCESS
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:step][4:0] State change queue: callBoolArrayCommand 
[PlexilExec:step][4:0:0] Transitioning node callBoolArrayCommand from FINISHING to ITERATION_ENDED
[PlexilExec:step][4:1] State change queue: testCallBoolArrayCommand callBoolArrayCommand 
[PlexilExec:step][4:1:0] Transitioning node testCallBoolArrayCommand from WAITING to EXECUTING
[PlexilExec:step][4:1:1] Transitioning node callBoolArrayCommand from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'callBoolArrayCommand' is SUCCESS
[PlexilExec:step][4:2] State change queue: testCallBoolArrayCommand 
[PlexilExec:step][4:2:0] Transitioning node testCallBoolArrayCommand from EXECUTING to ITERATION_ENDED
[PlexilExec:step][4:3] State change queue: testCallBoolArrayCommand 
[PlexilExec:step][4:3:0] Transitioning node testCallBoolArrayCommand from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'testCallBoolArrayCommand' is SUCCESS
[PlexilExec:step][4:4] State change queue: TestArrays 
[PlexilExec:step][4:4:0] Transitioning node TestArrays from EXECUTING to FINISHING
[PlexilExec:step][4:5] State change queue: TestArrays 
[PlexilExec:step][4:5:0] Transitioning node TestArrays from FINISHING to ITERATION_ENDED
[PlexilExec:step][4:6] State change queue: TestArrays 
[PlexilExec:step][4:6:0] Transitioning node TestArrays from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'TestArrays' is SUCCESS
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
TestArrays{
 State: TestArrays (id_75[au](FINISHED): state) (0)
 Outcome: TestArrays (id_77[au](SUCCESS): outcome)
 myBooleanArray: myBooleanArray (id_96[iu](Array: [1, 1, 1]): array)
 myIntegerArray: myIntegerArray (id_93[iu](Array: [1, 2, <unknown>]): array)
 myRealArray: myRealArray (id_90[iu](Array: [1.1, 2.2, <unknown>]): array)
 myStringArray: myStringArray (id_87[iu](Array: ["string 1", "string 2", <unknown>]): array)
 x: x (id_85[iu](4): int)
  testIntStateVariable{
   State: testIntStateVariable (id_100[au](FINISHED): state) (0)
   Outcome: testIntStateVariable (id_102[au](SUCCESS): outcome)
  }
  callBoolArrayCommand{
   State: callBoolArrayCommand (id_127[au](FINISHED): state) (0)
   Outcome: callBoolArrayCommand (id_129[au](SUCCESS): outcome)
   Command handle: callBoolArrayCommand command_handle (id_333[iu](COMMAND_SUCCESS): command_handle)
   myBooleanArray: myBooleanArray (id_96[iu](Array: [1, 1, 1]): array)
  }
  testCallBoolArrayCommand{
   State: testCallBoolArrayCommand (id_162[au](FINISHED): state) (0)
   Outcome: testCallBoolArrayCommand (id_164[au](SUCCESS): outcome)
   myBooleanArray: myBooleanArray (id_96[iu](Array: [1, 1, 1]): array)
  }
}

