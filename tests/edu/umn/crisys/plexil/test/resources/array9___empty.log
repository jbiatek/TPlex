
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: TestArrayAssignment 
[PlexilExec:step][1:0:0] Transitioning node TestArrayAssignment from INACTIVE to WAITING
[PlexilExec:step][1:1] State change queue: TestArrayAssignment 
[PlexilExec:step][1:1:0] Transitioning node TestArrayAssignment from WAITING to EXECUTING
[PlexilExec:step][1:2] State change queue: testIntArrayAssignment 
[PlexilExec:step][1:2:0] Transitioning node testIntArrayAssignment from INACTIVE to WAITING
[PlexilExec:step][1:3] State change queue: testIntArrayAssignment 
[PlexilExec:step][1:3:0] Transitioning node testIntArrayAssignment from WAITING to EXECUTING
[Test:testOutput]Assigning 'myIntegerArray' (myIntegerArray (id_39[au](Array: [1, 2, <unknown>]): array)) to Array: [4, 5, 6]
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
TestArrayAssignment{
 State: TestArrayAssignment (id_29[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_35[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_35[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_37[au](1): boolean)
 SkipCondition: Boolean constant false (id_35[au](0): boolean)
 StartCondition: (id_114[iu](UNKNOWN): ((id_116[iu](UNKNOWN): !(id_118[iu](UNKNOWN): isknown((id_120[iu](UNKNOWN): ArrayElement: myIntegerArray (id_39[au](Array: [4, 5, 6]): array)[IntegerValue (id_124[au](2): int)]))))))
 EndCondition: (id_109[au](0): childrenFinished(0:1))
 ExitCondition: Boolean constant false (id_35[au](0): boolean)
 InvariantCondition: Boolean constant true (id_37[au](1): boolean)
 PreCondition: Boolean constant true (id_37[au](1): boolean)
 PostCondition: Boolean constant true (id_37[au](1): boolean)
 RepeatCondition: Boolean constant false (id_35[au](0): boolean)
 ActionCompleteCondition: (id_104[iu](UNKNOWN): childrenWaitingOrFinished(0:1))
 myIntegerArray: myIntegerArray (id_39[au](Array: [4, 5, 6]): array)
  testIntArrayAssignment{
   State: testIntArrayAssignment (id_43[au](EXECUTING): state) (0)
   AncestorEndCondition: (id_109[au](0): childrenFinished(0:1))
   AncestorExitCondition: Boolean constant false (id_35[au](0): boolean)
   AncestorInvariantCondition: Boolean constant true (id_37[au](1): boolean)
   SkipCondition: Boolean constant false (id_35[au](0): boolean)
   StartCondition: (id_136[iu](UNKNOWN): ((id_138[iu](UNKNOWN): ArrayElement: myIntegerArray (id_39[au](Array: [4, 5, 6]): array)[IntegerValue (id_142[au](0): int)]) == IntegerValue (id_144[au](1): int)))
   EndCondition: Boolean constant true (id_37[au](1): boolean)
   ExitCondition: Boolean constant false (id_35[au](0): boolean)
   InvariantCondition: Boolean constant true (id_37[au](1): boolean)
   PreCondition: Boolean constant true (id_37[au](1): boolean)
   PostCondition: Boolean constant true (id_37[au](1): boolean)
   RepeatCondition: Boolean constant false (id_35[au](0): boolean)
   ActionCompleteCondition: testIntArrayAssignment ack (id_128[au](1): boolean)
   AbortCompleteCondition: testIntArrayAssignment abortComplete (id_130[iu](UNKNOWN): boolean)
   myIntegerArray: myIntegerArray (id_39[au](Array: [4, 5, 6]): array)
   myOtherIntegerArray: myOtherIntegerArray (id_49[au](Array: [4, 5, 6]): array)
  }
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:step][2:0] State change queue: testIntArrayAssignment 
[PlexilExec:step][2:0:0] Transitioning node testIntArrayAssignment from EXECUTING to ITERATION_ENDED
[PlexilExec:step][2:1] State change queue: testIntArrayAssignment 
[PlexilExec:step][2:1:0] Transitioning node testIntArrayAssignment from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'testIntArrayAssignment' is SUCCESS
[PlexilExec:step][2:2] State change queue: TestArrayAssignment 
[PlexilExec:step][2:2:0] Transitioning node TestArrayAssignment from EXECUTING to FINISHING
[PlexilExec:step][2:3] State change queue: TestArrayAssignment 
[PlexilExec:step][2:3:0] Transitioning node TestArrayAssignment from FINISHING to ITERATION_ENDED
[PlexilExec:step][2:4] State change queue: TestArrayAssignment 
[PlexilExec:step][2:4:0] Transitioning node TestArrayAssignment from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'TestArrayAssignment' is SUCCESS
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
TestArrayAssignment{
 State: TestArrayAssignment (id_29[au](FINISHED): state) (0)
 Outcome: TestArrayAssignment (id_31[au](SUCCESS): outcome)
 myIntegerArray: myIntegerArray (id_39[iu](Array: [4, 5, 6]): array)
  testIntArrayAssignment{
   State: testIntArrayAssignment (id_43[au](FINISHED): state) (0)
   Outcome: testIntArrayAssignment (id_45[au](SUCCESS): outcome)
   myIntegerArray: myIntegerArray (id_39[iu](Array: [4, 5, 6]): array)
   myOtherIntegerArray: myOtherIntegerArray (id_49[iu](Array: [4, 5, 6]): array)
  }
}

