
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[Test:testOutput]Creating initial state some_state() = 0
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 1
[PlexilExec:step][1:0] State change queue: StartConditionCheck 
[PlexilExec:step][1:0:0] Transitioning node StartConditionCheck from INACTIVE to WAITING
[Test:testOutput]Registering change lookup for some_state()
[Test:testOutput]Looking up immediately some_state()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>End cycle 1
[PlexilExec:printPlan]
StartConditionCheck{
 State: StartConditionCheck (id_22[au](WAITING): state) (0)
 AncestorEndCondition: Boolean constant false (id_28[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_28[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_30[au](1): boolean)
 SkipCondition: Boolean constant false (id_28[au](0): boolean)
 StartCondition: (id_67[au](0): ((id_69[au](0): LookupOnChange(some_state(), RealValue (id_73[au](1): real))) >= RealValue (id_75[au](3): real)))
 EndCondition: Boolean constant true (id_30[au](1): boolean)
 ExitCondition: Boolean constant false (id_28[au](0): boolean)
 InvariantCondition: Boolean constant true (id_30[au](1): boolean)
 PreCondition: Boolean constant true (id_30[au](1): boolean)
 PostCondition: Boolean constant true (id_30[au](1): boolean)
 RepeatCondition: Boolean constant false (id_28[au](0): boolean)
 ActionCompleteCondition: StartConditionCheck ack (id_61[iu](UNKNOWN): boolean)
 AbortCompleteCondition: StartConditionCheck abortComplete (id_63[iu](UNKNOWN): boolean)
 foo: foo (id_32[iu](0): int)
}

[Test:testOutput]Processing event: some_state() = 1
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 2
[PlexilExec:cycle]==>End cycle 2
[PlexilExec:printPlan]
StartConditionCheck{
 State: StartConditionCheck (id_22[au](WAITING): state) (0)
 AncestorEndCondition: Boolean constant false (id_28[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_28[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_30[au](1): boolean)
 SkipCondition: Boolean constant false (id_28[au](0): boolean)
 StartCondition: (id_67[au](0): ((id_69[au](1): LookupOnChange(some_state(), RealValue (id_73[au](1): real))) >= RealValue (id_75[au](3): real)))
 EndCondition: Boolean constant true (id_30[au](1): boolean)
 ExitCondition: Boolean constant false (id_28[au](0): boolean)
 InvariantCondition: Boolean constant true (id_30[au](1): boolean)
 PreCondition: Boolean constant true (id_30[au](1): boolean)
 PostCondition: Boolean constant true (id_30[au](1): boolean)
 RepeatCondition: Boolean constant false (id_28[au](0): boolean)
 ActionCompleteCondition: StartConditionCheck ack (id_61[iu](UNKNOWN): boolean)
 AbortCompleteCondition: StartConditionCheck abortComplete (id_63[iu](UNKNOWN): boolean)
 foo: foo (id_32[iu](0): int)
}

[Test:testOutput]Processing event: some_state() = 2
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 3
[PlexilExec:cycle]==>End cycle 3
[PlexilExec:printPlan]
StartConditionCheck{
 State: StartConditionCheck (id_22[au](WAITING): state) (0)
 AncestorEndCondition: Boolean constant false (id_28[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_28[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_30[au](1): boolean)
 SkipCondition: Boolean constant false (id_28[au](0): boolean)
 StartCondition: (id_67[au](0): ((id_69[au](2): LookupOnChange(some_state(), RealValue (id_73[au](1): real))) >= RealValue (id_75[au](3): real)))
 EndCondition: Boolean constant true (id_30[au](1): boolean)
 ExitCondition: Boolean constant false (id_28[au](0): boolean)
 InvariantCondition: Boolean constant true (id_30[au](1): boolean)
 PreCondition: Boolean constant true (id_30[au](1): boolean)
 PostCondition: Boolean constant true (id_30[au](1): boolean)
 RepeatCondition: Boolean constant false (id_28[au](0): boolean)
 ActionCompleteCondition: StartConditionCheck ack (id_61[iu](UNKNOWN): boolean)
 AbortCompleteCondition: StartConditionCheck abortComplete (id_63[iu](UNKNOWN): boolean)
 foo: foo (id_32[iu](0): int)
}

[Test:testOutput]Processing event: some_state() = 3
[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 4
[PlexilExec:step][4:0] State change queue: StartConditionCheck 
[PlexilExec:step][4:0:0] Transitioning node StartConditionCheck from WAITING to EXECUTING
[Test:testOutput]Assigning 'foo' (foo (id_32[au](0): int)) to 3
[PlexilExec:cycle]==>End cycle 4
[PlexilExec:printPlan]
StartConditionCheck{
 State: StartConditionCheck (id_22[au](EXECUTING): state) (0)
 AncestorEndCondition: Boolean constant false (id_28[au](0): boolean)
 AncestorExitCondition: Boolean constant false (id_28[au](0): boolean)
 AncestorInvariantCondition: Boolean constant true (id_30[au](1): boolean)
 SkipCondition: Boolean constant false (id_28[au](0): boolean)
 StartCondition: (id_67[iu](UNKNOWN): ((id_69[iu](UNKNOWN): LookupOnChange(some_state(), RealValue (id_73[au](1): real))) >= RealValue (id_75[au](3): real)))
 EndCondition: Boolean constant true (id_30[au](1): boolean)
 ExitCondition: Boolean constant false (id_28[au](0): boolean)
 InvariantCondition: Boolean constant true (id_30[au](1): boolean)
 PreCondition: Boolean constant true (id_30[au](1): boolean)
 PostCondition: Boolean constant true (id_30[au](1): boolean)
 RepeatCondition: Boolean constant false (id_28[au](0): boolean)
 ActionCompleteCondition: StartConditionCheck ack (id_61[au](1): boolean)
 AbortCompleteCondition: StartConditionCheck abortComplete (id_63[iu](UNKNOWN): boolean)
 foo: foo (id_32[au](3): int)
}

[Test:testOutput]Looking up immediately time()
[Test:testOutput]Returning value 0
[PlexilExec:cycle]==>Start cycle 5
[PlexilExec:step][5:0] State change queue: StartConditionCheck 
[PlexilExec:step][5:0:0] Transitioning node StartConditionCheck from EXECUTING to ITERATION_ENDED
[PlexilExec:step][5:1] State change queue: StartConditionCheck 
[PlexilExec:step][5:1:0] Transitioning node StartConditionCheck from ITERATION_ENDED to FINISHED
[Node:outcome]Outcome of 'StartConditionCheck' is SUCCESS
[PlexilExec:cycle]==>End cycle 5
[PlexilExec:printPlan]
StartConditionCheck{
 State: StartConditionCheck (id_22[au](FINISHED): state) (0)
 Outcome: StartConditionCheck (id_24[au](SUCCESS): outcome)
 foo: foo (id_32[iu](3): int)
}

