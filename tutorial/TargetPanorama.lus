type pboolean = enum {p_unknown, p_true, p_false};
type pstate = enum {inactive, waiting, executing, finishing, iteration_ended, failing, finished};
type command_handle = enum {commandhandlestate_unknown, command_accepted, command_success, command_rcvd_by_system, command_sent_to_system, command_failed, command_denied, command_aborted, command_abort_failed};
type node_outcome = enum {nodeoutcome_unknown, success, failure, skipped, interrupted};
type node_failure = enum {nodefailuretype_unknown, pre_condition_failed, post_condition_failed, invariant_condition_failed, parent_failed, exited, parent_exited};
type PlexilString = enum {unknown_str__, empty_str__};

node p_and(
  first : pboolean;
  second : pboolean
) returns (
  result : pboolean
);
let
  result = (if ((first = p_false) or (second = p_false)) then p_false else (if ((first = p_unknown) or (second = p_unknown)) then p_unknown else p_true));

tel;

node p_or(
  first : pboolean;
  second : pboolean
) returns (
  result : pboolean
);
let
  result = (if ((first = p_true) or (second = p_true)) then p_true else (if ((first = p_unknown) or (second = p_unknown)) then p_unknown else p_false));

tel;

node p_not(
  value : pboolean
) returns (
  result : pboolean
);
let
  result = (if (value = p_true) then p_false else (if (value = p_false) then p_true else p_unknown));

tel;

node to_pboolean(
  value : bool
) returns (
  result : pboolean
);
let
  result = (if value then p_true else p_false);

tel;

node pint_lt(
  av : int;
  ak : bool;
  bv : int;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av < bv) then p_true else p_false) else p_unknown);

tel;

node preal_lt(
  av : real;
  ak : bool;
  bv : real;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av < bv) then p_true else p_false) else p_unknown);

tel;

node pint_le(
  av : int;
  ak : bool;
  bv : int;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av <= bv) then p_true else p_false) else p_unknown);

tel;

node preal_le(
  av : real;
  ak : bool;
  bv : real;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av <= bv) then p_true else p_false) else p_unknown);

tel;

node pint_eq(
  av : int;
  ak : bool;
  bv : int;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av = bv) then p_true else p_false) else p_unknown);

tel;

node preal_eq(
  av : real;
  ak : bool;
  bv : real;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av = bv) then p_true else p_false) else p_unknown);

tel;

node pint_gt(
  av : int;
  ak : bool;
  bv : int;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av > bv) then p_true else p_false) else p_unknown);

tel;

node preal_gt(
  av : real;
  ak : bool;
  bv : real;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av > bv) then p_true else p_false) else p_unknown);

tel;

node pint_ge(
  av : int;
  ak : bool;
  bv : int;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av >= bv) then p_true else p_false) else p_unknown);

tel;

node preal_ge(
  av : real;
  ak : bool;
  bv : real;
  bk : bool
) returns (
  result : pboolean
);
let
  result = (if (ak and bk) then (if (av >= bv) then p_true else p_false) else p_unknown);

tel;

node int_max(
  a : int;
  b : int
) returns (
  o : int
);
let
  o = (if (a > b) then a else b);

tel;

node int_min(
  a : int;
  b : int
) returns (
  o : int
);
let
  o = (if (a < b) then a else b);

tel;

node real_max(
  a : real;
  b : real
) returns (
  o : real
);
let
  o = (if (a > b) then a else b);

tel;

node real_min(
  a : real;
  b : real
) returns (
  o : real
);
let
  o = (if (a < b) then a else b);

tel;

node real_mod(
  x : real;
  y : real
) returns (
  o : real
);
let
  o = (x - (real(floor((x / y))) * y));

tel;

node p_eq_pboolean(
  first : pboolean;
  second : pboolean
) returns (
  result : pboolean
);
let
  result = (if ((first = p_unknown) or (second = p_unknown)) then p_unknown else (if (first = second) then p_true else p_false));

tel;

node p_eq_node_outcome(
  first : node_outcome;
  second : node_outcome
) returns (
  result : pboolean
);
let
  result = (if ((first = nodeoutcome_unknown) or (second = nodeoutcome_unknown)) then p_unknown else (if (first = second) then p_true else p_false));

tel;

node p_eq_node_failure(
  first : node_failure;
  second : node_failure
) returns (
  result : pboolean
);
let
  result = (if ((first = nodefailuretype_unknown) or (second = nodefailuretype_unknown)) then p_unknown else (if (first = second) then p_true else p_false));

tel;

node p_eq_command_handle(
  first : command_handle;
  second : command_handle
) returns (
  result : pboolean
);
let
  result = (if ((first = commandhandlestate_unknown) or (second = commandhandlestate_unknown)) then p_unknown else (if (first = second) then p_true else p_false));

tel;

node p_eq_PlexilString(
  first : PlexilString;
  second : PlexilString
) returns (
  result : pboolean
);
let
  result = (if ((first = unknown_str__) or (second = unknown_str__)) then p_unknown else (if (first = second) then p_true else p_false));

tel;

node TargetPanorama(
  raw__Lookup__time__value : real;
  raw__Lookup__time__isknown : bool;
  raw__Lookup__temperature__value : real;
  raw__Lookup__temperature__isknown : bool;
  raw__Lookup__target_in_view : pboolean;
  raw__Drive____command_handle : command_handle;
  raw__StopForTimeout___Stop____command_handle : command_handle;
  raw__StopForTarget___Stop____command_handle : command_handle;
  raw__TakeNavcam____command_handle : command_handle;
  raw__TakePancam____command_handle : command_handle
) returns (
  outcome : node_outcome;
  state : pstate
);
var
  DriveToTarget__end_condition : pboolean;
  Drive__ancestor_ends_disjoined : pboolean;
  StopForTimeout__ancestor_ends_disjoined : pboolean;
  StopForTimeout__start_condition : pboolean;
  StopForTimeout__end_condition : pboolean;
  StopForTimeout___Stop__ancestor_ends_disjoined : pboolean;
  SetTimeoutFlag__ancestor_ends_disjoined : pboolean;
  StopForTarget__ancestor_ends_disjoined : pboolean;
  StopForTarget__skip_condition : pboolean;
  StopForTarget__start_condition : pboolean;
  StopForTarget__end_condition : pboolean;
  StopForTarget___Stop__ancestor_ends_disjoined : pboolean;
  SetDriveFlag__ancestor_ends_disjoined : pboolean;
  TakeNavcam__ancestor_ends_disjoined : pboolean;
  TakeNavcam__skip_condition : pboolean;
  TakeNavcam__start_condition : pboolean;
  TakePancam__ancestor_ends_disjoined : pboolean;
  TakePancam__skip_condition : pboolean;
  TakePancam__start_condition : pboolean;
  Lookup__time__value : real;
  Lookup__time__isknown : bool;
  Lookup__temperature__value : real;
  Lookup__temperature__isknown : bool;
  Lookup__target_in_view : pboolean;
  DriveToTarget__state : pstate;
  Drive__state : pstate;
  StopForTimeout__state : pstate;
  StopForTimeout___Stop__state : pstate;
  SetTimeoutFlag__state : pstate;
  StopForTarget__state : pstate;
  StopForTarget___Stop__state : pstate;
  SetDriveFlag__state : pstate;
  TakeNavcam__state : pstate;
  TakePancam__state : pstate;
  StopForTimeout___Stop____outcome : node_outcome;
  TakeNavcam____failure : node_failure;
  DriveToTarget__timeout : pboolean;
  StopForTarget___Stop____outcome : node_outcome;
  StopForTarget____failure : node_failure;
  TakePancam____outcome : node_outcome;
  DriveToTarget____outcome : node_outcome;
  Drive____failure : node_failure;
  StopForTimeout___Stop____failure : node_failure;
  Drive____outcome : node_outcome;
  SetTimeoutFlag____failure : node_failure;
  SetDriveFlag____failure : node_failure;
  DriveToTarget__drive_done : pboolean;
  TakeNavcam____outcome : node_outcome;
  StopForTarget____outcome : node_outcome;
  SetTimeoutFlag____outcome : node_outcome;
  TakePancam____failure : node_failure;
  SetDriveFlag____outcome : node_outcome;
  StopForTimeout____outcome : node_outcome;
  StopForTimeout____failure : node_failure;
  DriveToTarget____failure : node_failure;
  StopForTarget___Stop____failure : node_failure;
  Drive____command_handle : command_handle;
  StopForTimeout___Stop____command_handle : command_handle;
  StopForTarget___Stop____command_handle : command_handle;
  TakeNavcam____command_handle : command_handle;
  TakePancam____command_handle : command_handle;
  macrostep_end : bool;
let
  --%MAIN;
  DriveToTarget__end_condition = p_and(p_and(p_and(p_and(to_pboolean((finished = Drive__state)), to_pboolean((finished = StopForTimeout__state))), to_pboolean((finished = StopForTarget__state))), to_pboolean((finished = TakeNavcam__state))), to_pboolean((finished = TakePancam__state)));

  Drive__ancestor_ends_disjoined = DriveToTarget__end_condition;

  StopForTimeout__ancestor_ends_disjoined = DriveToTarget__end_condition;

  StopForTimeout__start_condition = preal_ge(Lookup__time__value, Lookup__time__isknown, 10.0, true);

  StopForTimeout__end_condition = p_and(to_pboolean((finished = StopForTimeout___Stop__state)), to_pboolean((finished = SetTimeoutFlag__state)));

  StopForTimeout___Stop__ancestor_ends_disjoined = p_or(StopForTimeout__end_condition, StopForTimeout__ancestor_ends_disjoined);

  SetTimeoutFlag__ancestor_ends_disjoined = p_or(StopForTimeout__end_condition, StopForTimeout__ancestor_ends_disjoined);

  StopForTarget__ancestor_ends_disjoined = DriveToTarget__end_condition;

  StopForTarget__skip_condition = DriveToTarget__timeout;

  StopForTarget__start_condition = Lookup__target_in_view;

  StopForTarget__end_condition = p_and(to_pboolean((finished = StopForTarget___Stop__state)), to_pboolean((finished = SetDriveFlag__state)));

  StopForTarget___Stop__ancestor_ends_disjoined = p_or(StopForTarget__end_condition, StopForTarget__ancestor_ends_disjoined);

  SetDriveFlag__ancestor_ends_disjoined = p_or(StopForTarget__end_condition, StopForTarget__ancestor_ends_disjoined);

  TakeNavcam__ancestor_ends_disjoined = DriveToTarget__end_condition;

  TakeNavcam__skip_condition = DriveToTarget__drive_done;

  TakeNavcam__start_condition = DriveToTarget__timeout;

  TakePancam__ancestor_ends_disjoined = DriveToTarget__end_condition;

  TakePancam__skip_condition = DriveToTarget__timeout;

  TakePancam__start_condition = DriveToTarget__drive_done;

  Lookup__time__value = (raw__Lookup__time__value -> (if macrostep_end then raw__Lookup__time__value else (pre Lookup__time__value)));

  Lookup__time__isknown = (raw__Lookup__time__isknown -> (if macrostep_end then raw__Lookup__time__isknown else (pre Lookup__time__isknown)));

  Lookup__temperature__value = (raw__Lookup__temperature__value -> (if macrostep_end then raw__Lookup__temperature__value else (pre Lookup__temperature__value)));

  Lookup__temperature__isknown = (raw__Lookup__temperature__isknown -> (if macrostep_end then raw__Lookup__temperature__isknown else (pre Lookup__temperature__isknown)));

  Lookup__target_in_view = (raw__Lookup__target_in_view -> (if macrostep_end then raw__Lookup__target_in_view else (pre Lookup__target_in_view)));

  DriveToTarget__state = (inactive -> (if ((inactive = (pre DriveToTarget__state)) and (pre true)) then waiting else (if ((waiting = (pre DriveToTarget__state)) and (pre true)) then executing else (if ((executing = (pre DriveToTarget__state)) and (pre (DriveToTarget__end_condition = p_true))) then finishing else (if ((finishing = (pre DriveToTarget__state)) and (pre ((((((Drive__state = waiting) or (Drive__state = finished)) and ((StopForTimeout__state = waiting) or (StopForTimeout__state = finished))) and ((StopForTarget__state = waiting) or (StopForTarget__state = finished))) and ((TakeNavcam__state = waiting) or (TakeNavcam__state = finished))) and ((TakePancam__state = waiting) or (TakePancam__state = finished))))) then iteration_ended else (if ((iteration_ended = (pre DriveToTarget__state)) and (pre true)) then finished else (pre DriveToTarget__state)))))));

  Drive__state = (inactive -> (if ((inactive = (pre Drive__state)) and (pre (finished = DriveToTarget__state))) then finished else (if ((inactive = (pre Drive__state)) and (pre (executing = DriveToTarget__state))) then waiting else (if ((waiting = (pre Drive__state)) and (pre (Drive__ancestor_ends_disjoined = p_true))) then finished else (if ((waiting = (pre Drive__state)) and (pre true)) then executing else (if ((executing = (pre Drive__state)) and (pre true)) then finishing else (if ((finishing = (pre Drive__state)) and (pre (Drive____command_handle <> commandhandlestate_unknown))) then iteration_ended else (if ((iteration_ended = (pre Drive__state)) and (pre (Drive__ancestor_ends_disjoined = p_true))) then finished else (if ((iteration_ended = (pre Drive__state)) and (pre true)) then finished else (if ((finished = (pre Drive__state)) and (pre (waiting = DriveToTarget__state))) then inactive else (pre Drive__state)))))))))));

  StopForTimeout__state = (inactive -> (if ((inactive = (pre StopForTimeout__state)) and (pre (finished = DriveToTarget__state))) then finished else (if ((inactive = (pre StopForTimeout__state)) and (pre (executing = DriveToTarget__state))) then waiting else (if ((waiting = (pre StopForTimeout__state)) and (pre (StopForTimeout__ancestor_ends_disjoined = p_true))) then finished else (if ((waiting = (pre StopForTimeout__state)) and (pre (StopForTimeout__start_condition = p_true))) then executing else (if ((executing = (pre StopForTimeout__state)) and (pre (StopForTimeout__end_condition = p_true))) then finishing else (if ((finishing = (pre StopForTimeout__state)) and (pre (((StopForTimeout___Stop__state = waiting) or (StopForTimeout___Stop__state = finished)) and ((SetTimeoutFlag__state = waiting) or (SetTimeoutFlag__state = finished))))) then iteration_ended else (if ((iteration_ended = (pre StopForTimeout__state)) and (pre (StopForTimeout__ancestor_ends_disjoined = p_true))) then finished else (if ((iteration_ended = (pre StopForTimeout__state)) and (pre true)) then finished else (if ((finished = (pre StopForTimeout__state)) and (pre (waiting = DriveToTarget__state))) then inactive else (pre StopForTimeout__state)))))))))));

  StopForTimeout___Stop__state = (inactive -> (if ((inactive = (pre StopForTimeout___Stop__state)) and (pre (finished = StopForTimeout__state))) then finished else (if ((inactive = (pre StopForTimeout___Stop__state)) and (pre (executing = StopForTimeout__state))) then waiting else (if ((waiting = (pre StopForTimeout___Stop__state)) and (pre (StopForTimeout___Stop__ancestor_ends_disjoined = p_true))) then finished else (if ((waiting = (pre StopForTimeout___Stop__state)) and (pre true)) then executing else (if ((executing = (pre StopForTimeout___Stop__state)) and (pre true)) then finishing else (if ((finishing = (pre StopForTimeout___Stop__state)) and (pre (StopForTimeout___Stop____command_handle <> commandhandlestate_unknown))) then iteration_ended else (if ((iteration_ended = (pre StopForTimeout___Stop__state)) and (pre (StopForTimeout___Stop__ancestor_ends_disjoined = p_true))) then finished else (if ((iteration_ended = (pre StopForTimeout___Stop__state)) and (pre true)) then finished else (if ((finished = (pre StopForTimeout___Stop__state)) and (pre (waiting = StopForTimeout__state))) then inactive else (pre StopForTimeout___Stop__state)))))))))));

  SetTimeoutFlag__state = (inactive -> (if ((inactive = (pre SetTimeoutFlag__state)) and (pre (finished = StopForTimeout__state))) then finished else (if ((inactive = (pre SetTimeoutFlag__state)) and (pre (executing = StopForTimeout__state))) then waiting else (if ((waiting = (pre SetTimeoutFlag__state)) and (pre (SetTimeoutFlag__ancestor_ends_disjoined = p_true))) then finished else (if ((waiting = (pre SetTimeoutFlag__state)) and (pre true)) then executing else (if ((executing = (pre SetTimeoutFlag__state)) and (pre true)) then iteration_ended else (if ((iteration_ended = (pre SetTimeoutFlag__state)) and (pre (SetTimeoutFlag__ancestor_ends_disjoined = p_true))) then finished else (if ((iteration_ended = (pre SetTimeoutFlag__state)) and (pre true)) then finished else (if ((finished = (pre SetTimeoutFlag__state)) and (pre (waiting = StopForTimeout__state))) then inactive else (pre SetTimeoutFlag__state))))))))));

  StopForTarget__state = (inactive -> (if ((inactive = (pre StopForTarget__state)) and (pre (finished = DriveToTarget__state))) then finished else (if ((inactive = (pre StopForTarget__state)) and (pre (executing = DriveToTarget__state))) then waiting else (if ((waiting = (pre StopForTarget__state)) and (pre (StopForTarget__ancestor_ends_disjoined = p_true))) then finished else (if ((waiting = (pre StopForTarget__state)) and (pre (StopForTarget__skip_condition = p_true))) then finished else (if ((waiting = (pre StopForTarget__state)) and (pre (StopForTarget__start_condition = p_true))) then executing else (if ((executing = (pre StopForTarget__state)) and (pre (StopForTarget__end_condition = p_true))) then finishing else (if ((finishing = (pre StopForTarget__state)) and (pre (((StopForTarget___Stop__state = waiting) or (StopForTarget___Stop__state = finished)) and ((SetDriveFlag__state = waiting) or (SetDriveFlag__state = finished))))) then iteration_ended else (if ((iteration_ended = (pre StopForTarget__state)) and (pre (StopForTarget__ancestor_ends_disjoined = p_true))) then finished else (if ((iteration_ended = (pre StopForTarget__state)) and (pre true)) then finished else (if ((finished = (pre StopForTarget__state)) and (pre (waiting = DriveToTarget__state))) then inactive else (pre StopForTarget__state))))))))))));

  StopForTarget___Stop__state = (inactive -> (if ((inactive = (pre StopForTarget___Stop__state)) and (pre (finished = StopForTarget__state))) then finished else (if ((inactive = (pre StopForTarget___Stop__state)) and (pre (executing = StopForTarget__state))) then waiting else (if ((waiting = (pre StopForTarget___Stop__state)) and (pre (StopForTarget___Stop__ancestor_ends_disjoined = p_true))) then finished else (if ((waiting = (pre StopForTarget___Stop__state)) and (pre true)) then executing else (if ((executing = (pre StopForTarget___Stop__state)) and (pre true)) then finishing else (if ((finishing = (pre StopForTarget___Stop__state)) and (pre (StopForTarget___Stop____command_handle <> commandhandlestate_unknown))) then iteration_ended else (if ((iteration_ended = (pre StopForTarget___Stop__state)) and (pre (StopForTarget___Stop__ancestor_ends_disjoined = p_true))) then finished else (if ((iteration_ended = (pre StopForTarget___Stop__state)) and (pre true)) then finished else (if ((finished = (pre StopForTarget___Stop__state)) and (pre (waiting = StopForTarget__state))) then inactive else (pre StopForTarget___Stop__state)))))))))));

  SetDriveFlag__state = (inactive -> (if ((inactive = (pre SetDriveFlag__state)) and (pre (finished = StopForTarget__state))) then finished else (if ((inactive = (pre SetDriveFlag__state)) and (pre (executing = StopForTarget__state))) then waiting else (if ((waiting = (pre SetDriveFlag__state)) and (pre (SetDriveFlag__ancestor_ends_disjoined = p_true))) then finished else (if ((waiting = (pre SetDriveFlag__state)) and (pre true)) then executing else (if ((executing = (pre SetDriveFlag__state)) and (pre true)) then iteration_ended else (if ((iteration_ended = (pre SetDriveFlag__state)) and (pre (SetDriveFlag__ancestor_ends_disjoined = p_true))) then finished else (if ((iteration_ended = (pre SetDriveFlag__state)) and (pre true)) then finished else (if ((finished = (pre SetDriveFlag__state)) and (pre (waiting = StopForTarget__state))) then inactive else (pre SetDriveFlag__state))))))))));

  TakeNavcam__state = (inactive -> (if ((inactive = (pre TakeNavcam__state)) and (pre (finished = DriveToTarget__state))) then finished else (if ((inactive = (pre TakeNavcam__state)) and (pre (executing = DriveToTarget__state))) then waiting else (if ((waiting = (pre TakeNavcam__state)) and (pre (TakeNavcam__ancestor_ends_disjoined = p_true))) then finished else (if ((waiting = (pre TakeNavcam__state)) and (pre (TakeNavcam__skip_condition = p_true))) then finished else (if ((waiting = (pre TakeNavcam__state)) and (pre (TakeNavcam__start_condition = p_true))) then executing else (if ((executing = (pre TakeNavcam__state)) and (pre true)) then finishing else (if ((finishing = (pre TakeNavcam__state)) and (pre (TakeNavcam____command_handle <> commandhandlestate_unknown))) then iteration_ended else (if ((iteration_ended = (pre TakeNavcam__state)) and (pre (TakeNavcam__ancestor_ends_disjoined = p_true))) then finished else (if ((iteration_ended = (pre TakeNavcam__state)) and (pre true)) then finished else (if ((finished = (pre TakeNavcam__state)) and (pre (waiting = DriveToTarget__state))) then inactive else (pre TakeNavcam__state))))))))))));

  TakePancam__state = (inactive -> (if ((inactive = (pre TakePancam__state)) and (pre (finished = DriveToTarget__state))) then finished else (if ((inactive = (pre TakePancam__state)) and (pre (executing = DriveToTarget__state))) then waiting else (if ((waiting = (pre TakePancam__state)) and (pre (TakePancam__ancestor_ends_disjoined = p_true))) then finished else (if ((waiting = (pre TakePancam__state)) and (pre (TakePancam__skip_condition = p_true))) then finished else (if ((waiting = (pre TakePancam__state)) and (pre (TakePancam__start_condition = p_true))) then executing else (if ((executing = (pre TakePancam__state)) and (pre true)) then finishing else (if ((finishing = (pre TakePancam__state)) and (pre (TakePancam____command_handle <> commandhandlestate_unknown))) then iteration_ended else (if ((iteration_ended = (pre TakePancam__state)) and (pre (TakePancam__ancestor_ends_disjoined = p_true))) then finished else (if ((iteration_ended = (pre TakePancam__state)) and (pre true)) then finished else (if ((finished = (pre TakePancam__state)) and (pre (waiting = DriveToTarget__state))) then inactive else (pre TakePancam__state))))))))))));

  Drive____command_handle = (commandhandlestate_unknown -> (if ((((inactive = Drive__state) or (waiting = Drive__state)) or (skipped = Drive____outcome)) or (pre_condition_failed = Drive____failure)) then commandhandlestate_unknown else (if macrostep_end then raw__Drive____command_handle else (pre Drive____command_handle))));

  StopForTimeout___Stop____command_handle = (commandhandlestate_unknown -> (if ((((inactive = StopForTimeout___Stop__state) or (waiting = StopForTimeout___Stop__state)) or (skipped = StopForTimeout___Stop____outcome)) or (pre_condition_failed = StopForTimeout___Stop____failure)) then commandhandlestate_unknown else (if macrostep_end then raw__StopForTimeout___Stop____command_handle else (pre StopForTimeout___Stop____command_handle))));

  StopForTarget___Stop____command_handle = (commandhandlestate_unknown -> (if ((((inactive = StopForTarget___Stop__state) or (waiting = StopForTarget___Stop__state)) or (skipped = StopForTarget___Stop____outcome)) or (pre_condition_failed = StopForTarget___Stop____failure)) then commandhandlestate_unknown else (if macrostep_end then raw__StopForTarget___Stop____command_handle else (pre StopForTarget___Stop____command_handle))));

  TakeNavcam____command_handle = (commandhandlestate_unknown -> (if ((((inactive = TakeNavcam__state) or (waiting = TakeNavcam__state)) or (skipped = TakeNavcam____outcome)) or (pre_condition_failed = TakeNavcam____failure)) then commandhandlestate_unknown else (if macrostep_end then raw__TakeNavcam____command_handle else (pre TakeNavcam____command_handle))));

  TakePancam____command_handle = (commandhandlestate_unknown -> (if ((((inactive = TakePancam__state) or (waiting = TakePancam__state)) or (skipped = TakePancam____outcome)) or (pre_condition_failed = TakePancam____failure)) then commandhandlestate_unknown else (if macrostep_end then raw__TakePancam____command_handle else (pre TakePancam____command_handle))));

  DriveToTarget____outcome = (nodeoutcome_unknown -> (if (((pre DriveToTarget__state) = finishing) and (pre ((((((Drive__state = waiting) or (Drive__state = finished)) and ((StopForTimeout__state = waiting) or (StopForTimeout__state = finished))) and ((StopForTarget__state = waiting) or (StopForTarget__state = finished))) and ((TakeNavcam__state = waiting) or (TakeNavcam__state = finished))) and ((TakePancam__state = waiting) or (TakePancam__state = finished))))) then (pre success) else (pre DriveToTarget____outcome)));

  Drive____failure = (nodefailuretype_unknown -> (if (((pre Drive__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (if (((pre Drive__state) = waiting) and (pre (Drive__ancestor_ends_disjoined = p_true))) then (pre nodefailuretype_unknown) else (if (((pre Drive__state) = finishing) and (pre (Drive____command_handle <> commandhandlestate_unknown))) then (pre nodefailuretype_unknown) else (if (((pre Drive__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (pre Drive____failure))))));

  StopForTarget____outcome = (nodeoutcome_unknown -> (if (((pre StopForTarget__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre skipped) else (if (((pre StopForTarget__state) = waiting) and (pre (StopForTarget__ancestor_ends_disjoined = p_true))) then (pre skipped) else (if ((((pre StopForTarget__state) = waiting) and (pre (StopForTarget__skip_condition = p_true))) and (not (pre (StopForTarget__ancestor_ends_disjoined = p_true)))) then (pre skipped) else (if (((pre StopForTarget__state) = finishing) and (pre (((StopForTarget___Stop__state = waiting) or (StopForTarget___Stop__state = finished)) and ((SetDriveFlag__state = waiting) or (SetDriveFlag__state = finished))))) then (pre success) else (if (((pre StopForTarget__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodeoutcome_unknown) else (pre StopForTarget____outcome)))))));

  SetTimeoutFlag____outcome = (nodeoutcome_unknown -> (if (((pre SetTimeoutFlag__state) = inactive) and (pre (finished = StopForTimeout__state))) then (pre skipped) else (if (((pre SetTimeoutFlag__state) = waiting) and (pre (SetTimeoutFlag__ancestor_ends_disjoined = p_true))) then (pre skipped) else (if ((pre SetTimeoutFlag__state) = executing) then (pre success) else (if (((pre SetTimeoutFlag__state) = finished) and (pre (waiting = StopForTimeout__state))) then (pre nodeoutcome_unknown) else (pre SetTimeoutFlag____outcome))))));

  TakePancam____failure = (nodefailuretype_unknown -> (if (((pre TakePancam__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (if (((pre TakePancam__state) = waiting) and (pre (TakePancam__ancestor_ends_disjoined = p_true))) then (pre nodefailuretype_unknown) else (if ((((pre TakePancam__state) = waiting) and (pre (TakePancam__skip_condition = p_true))) and (not (pre (TakePancam__ancestor_ends_disjoined = p_true)))) then (pre nodefailuretype_unknown) else (if (((pre TakePancam__state) = finishing) and (pre (TakePancam____command_handle <> commandhandlestate_unknown))) then (pre nodefailuretype_unknown) else (if (((pre TakePancam__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (pre TakePancam____failure)))))));

  DriveToTarget__timeout = (p_false -> (if (((pre SetTimeoutFlag__state) <> executing) and (SetTimeoutFlag__state = executing)) then (pre p_true) else (pre DriveToTarget__timeout)));

  StopForTimeout___Stop____failure = (nodefailuretype_unknown -> (if (((pre StopForTimeout___Stop__state) = inactive) and (pre (finished = StopForTimeout__state))) then (pre nodefailuretype_unknown) else (if (((pre StopForTimeout___Stop__state) = waiting) and (pre (StopForTimeout___Stop__ancestor_ends_disjoined = p_true))) then (pre nodefailuretype_unknown) else (if (((pre StopForTimeout___Stop__state) = finishing) and (pre (StopForTimeout___Stop____command_handle <> commandhandlestate_unknown))) then (pre nodefailuretype_unknown) else (if (((pre StopForTimeout___Stop__state) = finished) and (pre (waiting = StopForTimeout__state))) then (pre nodefailuretype_unknown) else (pre StopForTimeout___Stop____failure))))));

  StopForTimeout____failure = (nodefailuretype_unknown -> (if (((pre StopForTimeout__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (if (((pre StopForTimeout__state) = waiting) and (pre (StopForTimeout__ancestor_ends_disjoined = p_true))) then (pre nodefailuretype_unknown) else (if (((pre StopForTimeout__state) = finishing) and (pre (((StopForTimeout___Stop__state = waiting) or (StopForTimeout___Stop__state = finished)) and ((SetTimeoutFlag__state = waiting) or (SetTimeoutFlag__state = finished))))) then (pre nodefailuretype_unknown) else (if (((pre StopForTimeout__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (pre StopForTimeout____failure))))));

  Drive____outcome = (nodeoutcome_unknown -> (if (((pre Drive__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre skipped) else (if (((pre Drive__state) = waiting) and (pre (Drive__ancestor_ends_disjoined = p_true))) then (pre skipped) else (if (((pre Drive__state) = finishing) and (pre (Drive____command_handle <> commandhandlestate_unknown))) then (pre success) else (if (((pre Drive__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodeoutcome_unknown) else (pre Drive____outcome))))));

  SetTimeoutFlag____failure = (nodefailuretype_unknown -> (if (((pre SetTimeoutFlag__state) = inactive) and (pre (finished = StopForTimeout__state))) then (pre nodefailuretype_unknown) else (if (((pre SetTimeoutFlag__state) = waiting) and (pre (SetTimeoutFlag__ancestor_ends_disjoined = p_true))) then (pre nodefailuretype_unknown) else (if ((pre SetTimeoutFlag__state) = executing) then (pre nodefailuretype_unknown) else (if (((pre SetTimeoutFlag__state) = finished) and (pre (waiting = StopForTimeout__state))) then (pre nodefailuretype_unknown) else (pre SetTimeoutFlag____failure))))));

  StopForTimeout___Stop____outcome = (nodeoutcome_unknown -> (if (((pre StopForTimeout___Stop__state) = inactive) and (pre (finished = StopForTimeout__state))) then (pre skipped) else (if (((pre StopForTimeout___Stop__state) = waiting) and (pre (StopForTimeout___Stop__ancestor_ends_disjoined = p_true))) then (pre skipped) else (if (((pre StopForTimeout___Stop__state) = finishing) and (pre (StopForTimeout___Stop____command_handle <> commandhandlestate_unknown))) then (pre success) else (if (((pre StopForTimeout___Stop__state) = finished) and (pre (waiting = StopForTimeout__state))) then (pre nodeoutcome_unknown) else (pre StopForTimeout___Stop____outcome))))));

  TakeNavcam____failure = (nodefailuretype_unknown -> (if (((pre TakeNavcam__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (if (((pre TakeNavcam__state) = waiting) and (pre (TakeNavcam__ancestor_ends_disjoined = p_true))) then (pre nodefailuretype_unknown) else (if ((((pre TakeNavcam__state) = waiting) and (pre (TakeNavcam__skip_condition = p_true))) and (not (pre (TakeNavcam__ancestor_ends_disjoined = p_true)))) then (pre nodefailuretype_unknown) else (if (((pre TakeNavcam__state) = finishing) and (pre (TakeNavcam____command_handle <> commandhandlestate_unknown))) then (pre nodefailuretype_unknown) else (if (((pre TakeNavcam__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (pre TakeNavcam____failure)))))));

  StopForTarget___Stop____outcome = (nodeoutcome_unknown -> (if (((pre StopForTarget___Stop__state) = inactive) and (pre (finished = StopForTarget__state))) then (pre skipped) else (if (((pre StopForTarget___Stop__state) = waiting) and (pre (StopForTarget___Stop__ancestor_ends_disjoined = p_true))) then (pre skipped) else (if (((pre StopForTarget___Stop__state) = finishing) and (pre (StopForTarget___Stop____command_handle <> commandhandlestate_unknown))) then (pre success) else (if (((pre StopForTarget___Stop__state) = finished) and (pre (waiting = StopForTarget__state))) then (pre nodeoutcome_unknown) else (pre StopForTarget___Stop____outcome))))));

  DriveToTarget____failure = (nodefailuretype_unknown -> (if (((pre DriveToTarget__state) = finishing) and (pre ((((((Drive__state = waiting) or (Drive__state = finished)) and ((StopForTimeout__state = waiting) or (StopForTimeout__state = finished))) and ((StopForTarget__state = waiting) or (StopForTarget__state = finished))) and ((TakeNavcam__state = waiting) or (TakeNavcam__state = finished))) and ((TakePancam__state = waiting) or (TakePancam__state = finished))))) then (pre nodefailuretype_unknown) else (pre DriveToTarget____failure)));

  StopForTarget___Stop____failure = (nodefailuretype_unknown -> (if (((pre StopForTarget___Stop__state) = inactive) and (pre (finished = StopForTarget__state))) then (pre nodefailuretype_unknown) else (if (((pre StopForTarget___Stop__state) = waiting) and (pre (StopForTarget___Stop__ancestor_ends_disjoined = p_true))) then (pre nodefailuretype_unknown) else (if (((pre StopForTarget___Stop__state) = finishing) and (pre (StopForTarget___Stop____command_handle <> commandhandlestate_unknown))) then (pre nodefailuretype_unknown) else (if (((pre StopForTarget___Stop__state) = finished) and (pre (waiting = StopForTarget__state))) then (pre nodefailuretype_unknown) else (pre StopForTarget___Stop____failure))))));

  SetDriveFlag____outcome = (nodeoutcome_unknown -> (if (((pre SetDriveFlag__state) = inactive) and (pre (finished = StopForTarget__state))) then (pre skipped) else (if (((pre SetDriveFlag__state) = waiting) and (pre (SetDriveFlag__ancestor_ends_disjoined = p_true))) then (pre skipped) else (if ((pre SetDriveFlag__state) = executing) then (pre success) else (if (((pre SetDriveFlag__state) = finished) and (pre (waiting = StopForTarget__state))) then (pre nodeoutcome_unknown) else (pre SetDriveFlag____outcome))))));

  SetDriveFlag____failure = (nodefailuretype_unknown -> (if (((pre SetDriveFlag__state) = inactive) and (pre (finished = StopForTarget__state))) then (pre nodefailuretype_unknown) else (if (((pre SetDriveFlag__state) = waiting) and (pre (SetDriveFlag__ancestor_ends_disjoined = p_true))) then (pre nodefailuretype_unknown) else (if ((pre SetDriveFlag__state) = executing) then (pre nodefailuretype_unknown) else (if (((pre SetDriveFlag__state) = finished) and (pre (waiting = StopForTarget__state))) then (pre nodefailuretype_unknown) else (pre SetDriveFlag____failure))))));

  StopForTimeout____outcome = (nodeoutcome_unknown -> (if (((pre StopForTimeout__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre skipped) else (if (((pre StopForTimeout__state) = waiting) and (pre (StopForTimeout__ancestor_ends_disjoined = p_true))) then (pre skipped) else (if (((pre StopForTimeout__state) = finishing) and (pre (((StopForTimeout___Stop__state = waiting) or (StopForTimeout___Stop__state = finished)) and ((SetTimeoutFlag__state = waiting) or (SetTimeoutFlag__state = finished))))) then (pre success) else (if (((pre StopForTimeout__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodeoutcome_unknown) else (pre StopForTimeout____outcome))))));

  StopForTarget____failure = (nodefailuretype_unknown -> (if (((pre StopForTarget__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (if (((pre StopForTarget__state) = waiting) and (pre (StopForTarget__ancestor_ends_disjoined = p_true))) then (pre nodefailuretype_unknown) else (if ((((pre StopForTarget__state) = waiting) and (pre (StopForTarget__skip_condition = p_true))) and (not (pre (StopForTarget__ancestor_ends_disjoined = p_true)))) then (pre nodefailuretype_unknown) else (if (((pre StopForTarget__state) = finishing) and (pre (((StopForTarget___Stop__state = waiting) or (StopForTarget___Stop__state = finished)) and ((SetDriveFlag__state = waiting) or (SetDriveFlag__state = finished))))) then (pre nodefailuretype_unknown) else (if (((pre StopForTarget__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodefailuretype_unknown) else (pre StopForTarget____failure)))))));

  TakePancam____outcome = (nodeoutcome_unknown -> (if (((pre TakePancam__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre skipped) else (if (((pre TakePancam__state) = waiting) and (pre (TakePancam__ancestor_ends_disjoined = p_true))) then (pre skipped) else (if ((((pre TakePancam__state) = waiting) and (pre (TakePancam__skip_condition = p_true))) and (not (pre (TakePancam__ancestor_ends_disjoined = p_true)))) then (pre skipped) else (if (((pre TakePancam__state) = finishing) and (pre (TakePancam____command_handle <> commandhandlestate_unknown))) then (pre success) else (if (((pre TakePancam__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodeoutcome_unknown) else (pre TakePancam____outcome)))))));

  DriveToTarget__drive_done = (p_false -> (if (((pre SetDriveFlag__state) <> executing) and (SetDriveFlag__state = executing)) then (pre p_true) else (pre DriveToTarget__drive_done)));

  TakeNavcam____outcome = (nodeoutcome_unknown -> (if (((pre TakeNavcam__state) = inactive) and (pre (finished = DriveToTarget__state))) then (pre skipped) else (if (((pre TakeNavcam__state) = waiting) and (pre (TakeNavcam__ancestor_ends_disjoined = p_true))) then (pre skipped) else (if ((((pre TakeNavcam__state) = waiting) and (pre (TakeNavcam__skip_condition = p_true))) and (not (pre (TakeNavcam__ancestor_ends_disjoined = p_true)))) then (pre skipped) else (if (((pre TakeNavcam__state) = finishing) and (pre (TakeNavcam____command_handle <> commandhandlestate_unknown))) then (pre success) else (if (((pre TakeNavcam__state) = finished) and (pre (waiting = DriveToTarget__state))) then (pre nodeoutcome_unknown) else (pre TakeNavcam____outcome)))))));

  macrostep_end = (false -> (if (((pre Drive__state) <> executing) and (Drive__state = executing)) then true else (if (((pre StopForTimeout___Stop__state) <> executing) and (StopForTimeout___Stop__state = executing)) then true else (if (((pre SetTimeoutFlag__state) <> executing) and (SetTimeoutFlag__state = executing)) then true else (if (((pre StopForTarget___Stop__state) <> executing) and (StopForTarget___Stop__state = executing)) then true else (if (((pre SetDriveFlag__state) <> executing) and (SetDriveFlag__state = executing)) then true else (if (((pre TakeNavcam__state) <> executing) and (TakeNavcam__state = executing)) then true else (if (((pre TakePancam__state) <> executing) and (TakePancam__state = executing)) then true else ((((((((((DriveToTarget__state = (pre DriveToTarget__state)) and (Drive__state = (pre Drive__state))) and (StopForTimeout__state = (pre StopForTimeout__state))) and (StopForTimeout___Stop__state = (pre StopForTimeout___Stop__state))) and (SetTimeoutFlag__state = (pre SetTimeoutFlag__state))) and (StopForTarget__state = (pre StopForTarget__state))) and (StopForTarget___Stop__state = (pre StopForTarget___Stop__state))) and (SetDriveFlag__state = (pre SetDriveFlag__state))) and (TakeNavcam__state = (pre TakeNavcam__state))) and (TakePancam__state = (pre TakePancam__state)))))))))));

  outcome = (nodeoutcome_unknown -> DriveToTarget____outcome);

  state = (inactive -> DriveToTarget__state);

tel;
